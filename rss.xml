<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Hugo 主题 MemE</title>
        <link>https://example.com/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.72.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>reuixiy@gmail.com (reuixiy)</managingEditor>
        
        
            <webMaster>reuixiy@gmail.com (reuixiy)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Mon, 01 Jun 2020 20:21:54 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://example.com/rss.xml" />
        
        
            <item>
                <title>试着去理解虚拟DOM</title>
                <link>https://example.com/posts/%E8%AF%95%E7%9D%80%E5%8E%BB%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9Fdom/</link>
                <guid isPermaLink="true">https://example.com/posts/%E8%AF%95%E7%9D%80%E5%8E%BB%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9Fdom/</guid>
                <pubDate>Tue, 20 Aug 2019 17:57:12 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;去掉虚拟两个字先了解下什么是dom&#34;&gt;去掉虚拟两个字，先了解下什么是DOM？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在原生JS中有DOM操作，就是使用浏览器提供的一些API，选中一个元素对它进行操作，比如说：增加一个属性、增加一个孩子、修改它里面的内容、改变它的位置，直接对DOM操作。这个DOM实际上对应的就是浏览器里面你所能看的见的对应的某个元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;那什么是虚拟dom&#34;&gt;那什么是虚拟DOM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们要操作一个数据的报表，这个报表大概有几百条数据，我们要对这个报表进行一个排序的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们有这样一个表格，这里面大概有100多项
姓名 | 年纪 | 分数 | 等等
------|------|------|------
小红 | 12   | 44   |
小花 | 13   | 78   |&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当我去点年纪的时候，希望年纪里的所有DOM元素可以按照年纪去排序，当我点新增的时候会在表格下面再新增一行数据，当我点击姓名的时候所有DOM按照姓名去做一个排序，我们可以想下用原生JS怎么去做排序，用JS去对DOM结构去排序，操作起来很难实现，也很麻烦。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后来我们有了MVVM框架可以对数据排序，数据对应到页面上的DOM结构，我们只需要对数据排序，那里面的DOM结构自然就排序了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们自己实现一个框架，假设数据变了，那我们的DOM结构也就变了，难道我们需要把数据重新渲染一次，如果用户频繁大量改动数据，DOM也会频繁改动，就会造成卡顿，那我们可以去做一些优化，怎么去做优化呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那我们可以像计算机内存那样，我们可以自己设定一个虚拟的数据结构，它是对真实的DOM结构是一一对应的，我们可以先对虚拟的数据结构进行操作，等全部操作完成了，再把它渲染成真实的DOM，那就变成了真实的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;那这样做有什么好处呢？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;假设用户只做了微小的改动，比如增加了2条数据，那我们可以想打补丁一样，只把这两条加到真实的DOM里，而不用把整个DOM重新渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那这是虚拟DOM以及他的作用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那虚拟DOM就是针对真实DOM做的一个一一映射的类似虚拟的数据结构，有了变化再把数据结构渲染到DOM里，做到局部的变化，实现行能优化。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;那我们怎么实现它呢&#34;&gt;那我们怎么实现它呢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下代码为将数据结构如何转化为虚拟DOM，然后将虚拟DOM渲染到页面中变成真正的DOM。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class VNode {
  constructor(tag, children, text) {
    this.tag = tag
    this.text = text
    this.children = children
  }

  render() {
    if(this.tag === &#39;#text&#39;) {
      return document.createTextNode(this.text)
    }
    let el = document.createElement(this.tag)
    this.children.forEach(vChild =&amp;gt; {
      el.appendChild(vChild.render())
    })
    return el
  }
}

function v(tag, children, text) {
  if(typeof children === &#39;string&#39;) {
    text = children
    children = []
  }
  return new VNode(tag, children, text)
}


/*
//虚拟的JSON格式的数据结构
let nodesData = {
  tag: &#39;div&#39;,
  children: [
    {
      tag: &#39;p&#39;,
      children: [
        {
          tag: &#39;span&#39;,
          children: [
            {
              tag: &#39;#text&#39;,
              text: &#39;hi&#39;
            }
          ]
        }
      ]
    },
    {
      tag: &#39;span&#39;,
        children: [
          {
            tag: &#39;#text&#39;,
            text: &#39;oo&#39;
          }
        ]
    }
  ]
}

 */


let vNodes = v(&#39;div&#39;, [
      v(&#39;p&#39;, [
        v(&#39;span&#39;, [ v(&#39;#text&#39;, &#39;hi&#39;) ] )
        ]
      ),
      v(&#39;span&#39;, [
        v(&#39;#text&#39;,  &#39;oo&#39;)
        ])
    ]
  )
console.log(vNodes.render())


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;什么是diff&#34;&gt;什么是diff&lt;/h2&gt;
&lt;p&gt;我们需要做一些改变的时候，比如增删改查，那么我们需要将改变后的虚拟DOM树与真实的DOM树做对比，找出差异，然后做到局部更新改变的地方，那么找出差异就是diff（算法找两棵DOM树的差异）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下代码为简单的实现 DOM diff&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function patchElement(parent, newVNode, oldVNode, index = 0) {
  if(!oldVNode) {
    parent.appendChild(newVNode.render())
  } else if(!newVNode) {
    parent.removeChild(parent.childNodes[index])
  } else if(newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) {
    parent.replaceChild(newVNode.render(), parent.childNodes[index])
  }  else {
    for(let i = 0; i &amp;lt; newVNode.children.length || i &amp;lt; oldVNode.children.length; i++) {
      patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)
    }
  }
}



let vNode1 = v(&#39;div&#39;, [
      v(&#39;p&#39;, [
        v(&#39;span&#39;, [ v(&#39;#text&#39;, &#39;hi&#39;) ] )
        ]
      ),
      v(&#39;span&#39;, [
        v(&#39;#text&#39;,  &#39;oo&#39;)
        ])
    ]
  )

let vNode2 = v(&#39;div&#39;, [
      v(&#39;p&#39;, [
        v(&#39;span&#39;, [ 
          v(&#39;#text&#39;, &#39;hi&#39;) 
          ] )
        ]
      ),
      v(&#39;span&#39;, [
        v(&#39;#text&#39;,  &#39;oo&#39;),
        v(&#39;#text&#39;,  &#39;xx&#39;)
        ])
    ]
  )
const root = document.querySelector(&#39;#root&#39;)
patchElement(root, vNode1)
patchElement(root, vNode1，vNode2)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Cookie是什么</title>
                <link>https://example.com/posts/cookie%E6%98%AF%E4%BB%80%E4%B9%88/</link>
                <guid isPermaLink="true">https://example.com/posts/cookie%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
                <pubDate>Fri, 05 Jul 2019 14:36:40 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;维基百科定义&#34;&gt;维基百科定义&lt;/h1&gt;
&lt;p&gt;Cookie（复数形态Cookies），又称为“小甜饼”。类型为“小型文本文件”[1]，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明[2]。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。&lt;/p&gt;
&lt;h1 id=&#34;我的理解&#34;&gt;我的理解&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Cookie就是用户登录网站，浏览器去访问服务器问这个人能不能登录，然后服务器传送给浏览器的一段数据。&lt;/li&gt;
&lt;li&gt;浏览器会保留这段数据，不能随便删除（一般默认20分钟左右，浏览器不同具体时间不同）&lt;/li&gt;
&lt;li&gt;然后这段时间内用户通过浏览器继续访问服务器，都必须带一个Cookie&lt;/li&gt;
&lt;li&gt;Cookie 默认在用户关闭页面后就失效，后台代码可以任意设置 Cookie 的过期时间&lt;/li&gt;
&lt;li&gt;大小大概在 4kb 以内&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;cookie的特点&#34;&gt;Cookie的特点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;服务器通过 Set-Cookie 响应头设置Cookie&lt;/li&gt;
&lt;li&gt;浏览器得到Cookie之后，每次请求都要带上Cookie&lt;/li&gt;
&lt;li&gt;服务器读取Cookie就知道登录用户的信息（用户名啥的）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;如何使用-cookie&#34;&gt;如何使用 Cookie&lt;/h1&gt;
&lt;p&gt;Cookie 一般有两个作用。&lt;/p&gt;
&lt;h2 id=&#34;第一个作用是识别用户身份&#34;&gt;第一个作用是识别用户身份&lt;/h2&gt;
&lt;p&gt;比如用户小红用浏览器访问了 &lt;a href=&#34;http://qq.com&#34;&gt;http://qq.com&lt;/a&gt;，那么qq 的服务器就会立刻给小红返回一段数据就是Cookie。当 小红 再次访问qq的其他页面时，就会附带上这段数据。&lt;/p&gt;
&lt;p&gt;同理有个小白用浏览器访问了 &lt;a href=&#34;http://qq.com&#34;&gt;http://qq.com&lt;/a&gt;，那么qq 的服务器就会立刻给小白返回一段数据就是Cookie。当 小白 再次访问qq的其他页面时，就会附带上这段数据。&lt;/p&gt;
&lt;p&gt;借此，http://qq.com 的服务器就能区分 小白和 小红 两个用户了。&lt;/p&gt;
&lt;h2 id=&#34;第二个作用是记录历史&#34;&gt;第二个作用是记录历史&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://taobao.com&#34;&gt;http://taobao.com&lt;/a&gt; 是一个购物网站，当 小红 在上面将商品 白鞋 、酱油 加入购物车时，JS 可以改写 Cookie，在Cookie中添加两个商品的信息，表示购物车里有 白鞋 和 酱油 两样商品了。&lt;/p&gt;
&lt;p&gt;这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 白鞋、酱油 躺在购物车里，因为浏览器并不会无缘无故地删除这个 Cookie。&lt;/p&gt;
&lt;p&gt;借此，就达到里记录用户操作历史的目的了。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>JS高级基础知识小结</title>
                <link>https://example.com/posts/js%E9%AB%98%E7%BA%A7%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</link>
                <guid isPermaLink="true">https://example.com/posts/js%E9%AB%98%E7%BA%A7%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</guid>
                <pubDate>Sat, 29 Jun 2019 15:31:03 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;原型与原型链&#34;&gt;原型与原型链&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;var object = {}
object.__proto__ ===  Object.prototype  // 为 true

var fn = function(){}
fn.__proto__ === Function.prototype  // 为 true
fn.__proto__.__proto__ === Object.prototype // 为 true

var array = []
array.__proto__ === Array.prototype // 为 true
array.__proto__.__proto__ === Object.prototype // 为 true

Function.__proto__ === Function.prototype // 为 true
Array.__proto__ === Function.prototype // 为 true
Object.__proto__ === Function.prototype // 为 true

true.__proto__ === Boolean.prototype // 为 true

Function.prototype.__proto__ === Object.prototype // 为 true
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;面向对象new与this&#34;&gt;面向对象new与this&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;function fn(){
    console.log(this)
}
new fn()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;new fn() 会执行 fn，并打印出 this，请问这个 this 有哪些属性？这个 this 的原型有哪些属性？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this 自身没有属性（只有一个隐藏的 &lt;strong&gt;proto&lt;/strong&gt; 属性）&lt;/li&gt;
&lt;li&gt;this 的原型是 fn.prototype，只有一个属性 constructor，且 constructor === fn（另外还有一个隐藏属性 &lt;strong&gt;proto&lt;/strong&gt;，指向 Object.prototype&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;json与javascript&#34;&gt;JSON与JavaScript&lt;/h1&gt;
&lt;h2 id=&#34;json-和-javascript-是什么关系&#34;&gt;JSON 和 JavaScript 是什么关系?&lt;/h2&gt;
&lt;p&gt;关系：JSON 是一门抄袭/借鉴 JavaScript 的语言，同时也是一种数据交互格式，JSON 是 JavaScript 的子集（或者说 JSON 只抄袭了一部分 JavaScript 语法，而且没有新增任何原创的语法）&lt;/p&gt;
&lt;h2 id=&#34;json-和-javascript-的区别有哪些&#34;&gt;JSON 和 JavaScript 的区别有哪些？&lt;/h2&gt;
&lt;p&gt;区别：JSON 不支持函数、undefined、变量、引用、单引号字符串、对象的key不支持单引号也不支持不加引号、没有内置的 Date、Math、RegExp 等。
而 JavaScript 全都支持。&lt;/p&gt;
&lt;h1 id=&#34;前端mvc&#34;&gt;前端MVC&lt;/h1&gt;
&lt;h2 id=&#34;前端-mvc-是什么&#34;&gt;前端 MVC 是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MVC 是一种设计模式（或者软件架构），把系统分为三层：Model数据、View视图和Controller控制器。&lt;/li&gt;
&lt;li&gt;Model 数据管理，包括数据逻辑、数据请求、数据存储等功能。前端 Model 主要负责 AJAX 请求或者 LocalStorage 存储&lt;/li&gt;
&lt;li&gt;View 负责用户界面，前端 View 主要负责 HTML 渲染。&lt;/li&gt;
&lt;li&gt;Controller 负责处理 View 的事件，并更新 Model；也负责监听 Model 的变化，并更新 View，Controller 控制其他的所有流程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvc-三个对象分别有哪些重要属性和方法&#34;&gt;MVC 三个对象分别有哪些重要属性和方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代码1-将MVC分别存为3个基础文件将共有的属性放进去Model.js,View.js,Controller.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;window.Controller = function(options){
  var init = options.init
  let object = {
    view: null,
    model: null,
    init: function (view, model) {
      this.view = view
      this.model = model
      this.model.init()
      init.call(this, view, model)
      options.bindEvents.call(this)
    }
  }
  for(let key in options){
    if(key !== &#39;init&#39;){
      object[key] = options[key]
    }
  }
  return object
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;window.Model = function(options) {
  let resourceName = options.resourceName
  return{
    init: function () {
      var APP_ID = &#39;&#39;;
      var APP_KEY = &#39;&#39;;
      AV.init({
        appId: APP_ID,
        appKey: APP_KEY
      })
    },
    //获取数据
    fetch: function () {
      var query = new AV.Query(resourceName);
      return query.find() //Promise对象
    },
    //创建数据
    save: function (object) {
      var X = AV.Object.extend(resourceName);
      var x = new X();
      return x.save(object)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;window.View = function(selector){
  return document.querySelector(selector)
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;代码2-每个模块自己独有的MVC&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var model = {
    data: null,
    init(){}
    fetch(){}
    save(){}
    update(){}
    delete(){}
}
view = {
    init() {}
    template: &#39;&amp;lt;h1&amp;gt;hi&amp;lt;/h1&#39;&amp;gt;
}
controller = {
    view: null,
    model: null,
    init(view, model){
        this.view = view
        this.model = model
        this.bindEvents()
    }
    render(){
        this.view.querySelector(&#39;name&#39;).innerText = this.model.data.name
    },
    bindEvents(){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;在-es5-中如何用函数模拟一个类&#34;&gt;在 ES5 中如何用函数模拟一个类&lt;/h1&gt;
&lt;p&gt;ES 5 没有 class 关键字，所以只能使用函数来模拟类。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Human(name){
    this.name = name
}
Human.prototype.run = function(){}

var person = new Human(&#39;qq&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;promise相关&#34;&gt;Promise相关&lt;/h1&gt;
&lt;p&gt;jQuery 或者 axios 的 AJAX 功能，都返回的是 Promise 对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.ajax({url:&#39;/xxx&#39;, method:&#39;get&#39;}).then(success1, error1).then(success2, error2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我自己创建 Promise 对象，我会这么写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function asyncMethod(){
    return new Promise(function (resolve, reject){
        setTimeout(function(){
            成功则调用 resolve
            失败则调用 reject
        },3000)
    })
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>知识小汇总</title>
                <link>https://example.com/posts/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%B0%8F%E8%AE%B0/</link>
                <guid isPermaLink="true">https://example.com/posts/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%B0%8F%E8%AE%B0/</guid>
                <pubDate>Thu, 06 Jun 2019 17:35:48 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;请写出一个符合-w3c-规范的-html-文件&#34;&gt;请写出一个符合 W3C 规范的 HTML 文件&lt;/h1&gt;
&lt;p&gt;要求&lt;/p&gt;
&lt;p&gt;页面标题为「我的页面」&lt;/p&gt;
&lt;p&gt;页面中引入了一个外部 CSS 文件，文件路径为 /style.css&lt;/p&gt;
&lt;p&gt;页面中引入了另一个外部 CSS 文件，路径为&lt;/p&gt;
&lt;p&gt;/print.css，该文件仅在打印时生效&lt;/p&gt;
&lt;p&gt;页面中引入了另一个外部 CSS 文件，路径为&lt;/p&gt;
&lt;p&gt;/mobile.css，该文件仅在设备宽度小于 500 像素时生效&lt;/p&gt;
&lt;p&gt;页面中引入了一个外部 JS 文件，路径为 /main.js&lt;/p&gt;
&lt;p&gt;页面中引入了一个外部 JS 文件，路径为 /gbk.js，文件编码为 GBK&lt;/p&gt;
&lt;p&gt;页面中有一个 SVG 标签，SVG 里面有一个直径为 100 像素的圆圈，颜色随意
注意题目中的路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;我的页面&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/style.css&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/print.css&amp;quot; media=&amp;quot;print&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/mobile.css&amp;quot; media=&amp;quot;(max-width: 500px)&amp;quot;&amp;gt;
  &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    *{
        padding: 0;
        margin: 0;
     }
  &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;svg&amp;gt;
    &amp;lt;circle cx=&amp;quot;100&amp;quot; cy=&amp;quot;100&amp;quot; r=&amp;quot;50&amp;quot; fill=&amp;quot;black&amp;quot;&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/body&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./gbk.js&amp;quot; charset=&amp;quot;GBK&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;移动端是怎么做适配的&#34;&gt;移动端是怎么做适配的？&lt;/h1&gt;
&lt;p&gt;回答要点：&lt;/p&gt;
&lt;p&gt;meta viewport&lt;/p&gt;
&lt;p&gt;媒体查询&lt;/p&gt;
&lt;p&gt;动态 rem 方案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.meta viewport
在head标签内部加上这段代码

&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;quot;&amp;gt;
该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度。
width=device-width: 让当前viewport宽度等于设备的宽度
user-scalable=no: 禁止用户缩放
initial-scale=1.0: 设置页面的初始缩放值为不缩放
maximum-scale=1.0: 允许用户的最大缩放值为1.0
minimum-scale=1.0: 允许用户的最小缩放值为1.0
2.媒体查询

@media （）and（）{}
//满足（）里的条件，就执行大括号里css的样式
&amp;lt;style&amp;gt;
@media (max-width:320px){
    body{
        background: red;
    }
}
&amp;lt;/style&amp;gt;
当最大宽度分辨率满足，就生效这个红色背景的CSS样式
3.动态 rem 方案
1rem等于根元素html的font-size的值，那么可以调整根元素的font-size值来调整页面缩放后的各个元素的尺寸和定位。

在script标签加入这段代码：

&amp;lt;script&amp;gt;
   var pageWidth=window.innerWidth  //获取屏幕宽度
   document.documentElement.style.fontSize= `${pageWidth/60}px`
&amp;lt;/script&amp;gt;
此处，fontSizede的值为屏幕宽的十分之一，那么在写CSS的时候可以这样写：

.xxx{
    width:0.4rem;
    height:0.2rem;
    margin:0.05rem 0.05rem;
    float:left;
 }
用sass将px转化为rem：

@function px( $px ){
  @return $px/$designWidth*10 + rem;
}
$designWidth: 320px; 

那么1rem=32px
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;用过css3吗-实现圆角矩形和阴影怎么做&#34;&gt;用过CSS3吗? 实现圆角矩形和阴影怎么做?&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;用过CSS3。
1.实现圆角
实现圆角矩形
使用 border-radius 属性：

border-radius: 6px;
当使用一个半径时确定一个圆形；当使用两个半径时确定一个椭圆，这个(椭)圆与边框的交集形成圆角效果。
取值：

用 px 等 css 长度单位值来定义圆形半径或椭圆的半长轴，半短轴。不能用负值。
使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。不能用负值。
border-radius 属性又可以细分为以下 4 个属性，从左上角开始，逆时针依次为：

border-top-left-radius
border-top-right-radius
border-bottom-right-radius
border-bottom-left-radius
因此，可以为四个角各自单独设置，也可以用简写的 border-radius 属性一起设置。

border-radius: 6px;

/* 相当于 */

border-top-left-radius: 6px;
border-top-right-radius: 6px;
border-bottom-right-radius: 6px;
border-bottom-left-radius: 6px;
和其他简写属性类似，无法为个别值设定为继承，如 border-radius:0 0 inherit inherit，这会覆盖一部分现有定义。在这种情况下只能使用完整属性来指定。
2.阴影
有两种属性可以先实现阴影：

box-shadow 属性和 text-shadow 属性

使用 box-shadow 属性：
box-shadow: inset 2px 2px 2px 1px red;
会生成一个在边框内，水平、竖直偏移量均为 2px，模糊半径为 2px，同时阴影会扩大 1px 的红色阴影。
box-shadow使用一个或多个投影，如果使用多个投影时必须需要用逗号“，”分开。
对象选择器 {box-shadow:inset x-offset y-offset blur-radius spread-radius color}
对象选择器 {box-shadow:投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色}
为文字添加阴影可以用 text-shadow 属性：
text-shadow: 2px 2px 2px red;
会生成一个水平、竖直偏移量均为 2px，模糊半径为 2px 的红色阴影。
两个属性都可以有多组阴影值，多组阴影值之间用逗号相隔；多个阴影时会从前往后叠加，第一个阴影在最上面。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;什么是闭包闭包的用途是什么&#34;&gt;什么是闭包，闭包的用途是什么？&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1.什么是闭包？

function f1(){
    var n=999;
    function f2(){
　      alert(n); 
　　　　}
　　　　return f2;
　　}
上面代码中的f2函数，就是闭包。

闭包就是能够读取其他函数内部变量的函数。

由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&amp;quot;定义在一个函数内部的函数&amp;quot;。

所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。
2.闭包的用途是什么？
用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。

function f1() {

  var n = 999;

  nAdd = function () {
    n += 1
  }

  function f2() {
    alert(n);
  }

  return f2;

}

var result = f1();

result(); // 999

nAdd();

result(); // 1000
在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。

为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;callapplybind-的用法分别是什么&#34;&gt;call、apply、bind 的用法分别是什么？&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;apply()、call()和bind()方法都是Function.prototype对象中的方法，而所有的函数都是Function的实例。三者都可以改变this的指向，将函数绑定到上下文中。
apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数。 语法 func.apply(thisArg, [argsArray])
call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。 语法 fun.call(thisArg, arg1, arg2, ...)
bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。 语法 fun.bind(thisArg, 队列or数组)()
这三个方法的用法非常相似，将函数绑定到上下文中，即用来改变函数中this的指向。
function add(a,b){
  return a+b;
}
add.call(add, 5, 3); //8
add.apply(add, [5, 3]); //8
bind：bind 接受的参数跟 call 一致，只是 bind 不会立即调用，它会生成一个新的函数，你想什么时候调就什么时候调。如下代码：
function add(a, b){
  return a+b;
}
var foo1 = add.bind(add, 5,3); 
foo1(); //8
var foo1 = add.bind(add, 5,3); 
foo1(); //8
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;请说出至少-8-个-http-状态码并描述各状态码的意义&#34;&gt;请说出至少 8 个 HTTP 状态码，并描述各状态码的意义。&lt;/h1&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;状态码 200 表示响应成功。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码。
100 (继续) 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。

101 (切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。

2xx (成功)表示成功处理了请求的状态代码。
200 (成功) 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。

201 (已创建) 请求成功并且服务器创建了新的资源。

202 (已接受) 服务器已接受请求，但尚未处理。

203 (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。

204 (无内容) 服务器成功处理了请求，但没有返回任何内容。

205 (重置内容) 服务器成功处理了请求，但没有返回任何内容。

206 (部分内容) 服务器成功处理了部分 GET 请求。

3xx (重定向) 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。
300 (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。

301 (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。

302 (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。

303 (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。

304 (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。

305 (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。

307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。

4xx(请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理。
400 (错误请求) 服务器不理解请求的语法。

401 (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。

403 (禁止) 服务器拒绝请求。

404 (未找到) 服务器找不到请求的网页。

405 (方法禁用) 禁用请求中指定的方法。

406 (不接受) 无法使用请求的内容特性响应请求的网页。

407 (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。

408 (请求超时) 服务器等候请求时发生超时。

409 (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。

410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。

411 (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。

412 (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。

413 (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。

414 (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。

415 (不支持的媒体类型) 请求的格式不受请求页面的支持。

416 (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。

417 (未满足期望值) 服务器未满足&amp;quot;期望&amp;quot;请求标头字段的要求。

5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。
500 (服务器内部错误) 服务器遇到错误，无法完成请求。

501 (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。

502 (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。

503 (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。

504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。

505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;请写出一个-http-post-请求的内容包括四部分&#34;&gt;请写出一个 HTTP post 请求的内容，包括四部分。&lt;/h1&gt;
&lt;p&gt;其中
第四部分的内容是 username=ff&amp;amp;password=123&lt;/p&gt;
&lt;p&gt;第二部分必须含有 Content-Type 字段&lt;/p&gt;
&lt;p&gt;请求的路径为 /path&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 POST /path HTTP/1.1
2 Host: www.demo.com
2 Cache-Control: no-cache
2 Postman-Token: 81d7b315-d4be-8ee8-1237-04f3976de032
2 Content-Type: application/x-www-form-urlencoded
3 
4 username=ff&amp;amp;password=123
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;请说出至少三种排序的思路这三种排序的时间复杂度分别为&#34;&gt;请说出至少三种排序的思路，这三种排序的时间复杂度分别为&lt;/h1&gt;
&lt;p&gt;O(n*n)&lt;/p&gt;
&lt;p&gt;O(n log2 n)&lt;/p&gt;
&lt;p&gt;O(n + max)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.O(n*n)冒泡排序（升序）
选择第1个和第2个数字，如果第1个&amp;gt;第2个则二者交换位置，之后选择第2个和第3个数字，类似交换处理，一轮下来后，最大的数字会冒泡到最后一位。接下来，忽略已经排好的数字，对剩下的数字进行新一轮排序，直到所有数字都排序完成。
2.O(n log2 n)快速排序
从数列中挑出一个元素称为基准；
重新排序数列，所有比基准值小的元素放在基准前面，所有比基准值大的元素放在基准后面(相等的数可以放在任一边)；
递归的把小于基准值的子数列和大于基准值的子数列排序；
递归到最底部时，数列的大小是零或一，也就是已经排序好了。
3.O(n + max)基数排序
将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;一个页面从输入-url-到页面加载显示完成这个过程中都发生了什么&#34;&gt;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？&lt;/h1&gt;
&lt;p&gt;这一题是在挖掘你的知识边界，所以你知道多少就要答多少。&lt;/p&gt;
&lt;p&gt;可以先查阅一些资料再查，但是不要把自己不懂的东西放在答案里，面试官会追问的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.DNS解析
DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。

2.TCP连接
每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：

 1. 客户端：我要连接你了，可以吗
 2. 服务端：嗯，我准备好了，连接我吧
 3. 客户端：那我连接你咯。
 4. 开始后面步骤
3.发送HTTP请求
其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。

1 动词 路径 协议/版本
2 Key1: value1
2 Key2: value2
2 Key3: value3
2 Content-Type: application/x-www-form-urlencoded
2 Host: www.baidu.com
2 User-Agent: curl/7.54.0
3 
4 要上传的数据
4.服务器处理请求并返回HTTP报文
HTTP响应报文也是由三部分组成: 状态码, 响应报头和响应报文。
状态码
状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:

1xx：指示信息–表示请求已接收，继续处理。

2xx：成功–表示请求已被成功接收、理解、接受。

3xx：重定向–要完成请求必须进行更进一步的操作。

4xx：客户端错误–请求有语法错误或请求无法实现。

5xx：服务器端错误–服务器未能实现合法的请求。
平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500

5.浏览器解析渲染页面
浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上

6.连接结束
通过四次挥手关闭连接。一端断开连接需要两次挥手（请求和回应），两端断开连接就需要四次挥手。


&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;如何实现数组去重&#34;&gt;如何实现数组去重？&lt;/h1&gt;
&lt;p&gt;假设有数组 array = [1,5,2,3,4,2,3,1,3,4]&lt;/p&gt;
&lt;p&gt;你要写一个函数 unique，使得
unique(array) 的值为 [1,5,2,3,4]
也就是把重复的值都去掉，只保留不重复的值。&lt;/p&gt;
&lt;p&gt;要求：&lt;/p&gt;
&lt;p&gt;不要做多重循环，只能遍历一次
请给出两种方案，一种能在 ES 5 环境中运行，一种能在 ES 6 环境中运行（提示 ES 6 环境多了一个 Set 对象）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ES 5
ES5 提供了 filter 方法，我们可以用来简化外层循环：
比如使用 indexOf 的方法：

function unique(array) {
    var res = array.filter(function(item, index, array){
        return array.indexOf(item) === index;
    })
    return res;
}
console.log(unique(array));
排序去重的方法：

function unique(array) {
    return array.concat().sort().filter(function(item, index, array){
        return !index || item !== array[index - 1]
    })
}
console.log(unique(array));
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;ES 6

function unique(array) {
    return [...new Set(array)];
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>自己写一个简版jQuery</title>
                <link>https://example.com/posts/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E7%89%88jquery/</link>
                <guid isPermaLink="true">https://example.com/posts/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E7%89%88jquery/</guid>
                <pubDate>Wed, 24 Apr 2019 18:49:36 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;为了便于学习与理解jQuery，自己尝试去写一个只有两个API的简版jQuery。&lt;/p&gt;
&lt;h1 id=&#34;什么是jquery&#34;&gt;什么是JQuery&lt;/h1&gt;
&lt;p&gt;jQuery是js的一个工具库，由John Resig在2006年发布。&lt;/p&gt;
&lt;p&gt;j代表JavaScript，query是“查询”的意思。也就是说，这个库的意图是基于JavaScript的查询。&lt;/p&gt;
&lt;p&gt;查询的目标是什么？&lt;/p&gt;
&lt;p&gt;答案是DOM（文档对象模型）结构中的Node（节点）。一个网页就是一个html文档，而网页上的所有内容都是节点，包括文档节点、元素节点、文本节点、注释节点、属性节点等等。而jQuery的查询最主要针对的是元素节点，如段落（p）、锚点（a）、表格（table）等，只有少数方法可以处理文本节点与注释节点。同时jQuery还可以用attr方法方便地对元素节点的属性进行读取/设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jQuery的核心是通过各种选择器，选中DOM元素&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;节点或者选择器判断&#34;&gt;节点或者选择器判断&lt;/h1&gt;
&lt;p&gt;由于jQuery支持传参字符串，所以先判断参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.jQuery = function(nodeOrSelector) {
  let nodes = {}
  if (typeof nodeOrSelector === &#39;string&#39;) {
    let temp = document.querySelectorAll(nodeOrSelector)
    for (let i = 0; i &amp;lt; temp.length; i++) {
      nodes[i] = temp[i]
    }
    nodes.length = temp.length
  } else if (nodeOrSelector instanceof Node) {
    nodes = {
      0: nodeOrSelector,
      length: 1
    }
  }
    return nodes
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;addclass方法&#34;&gt;addClass方法&lt;/h1&gt;
&lt;p&gt;jQuery的addClass方法，用于为DOM元素添加一个class。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　$(&#39;body&#39;).addClass(&#39;hasJS&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DOM元素本身有一个可读写的className属性，可以用来操作class。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　document.body.className = &#39;hasJS&#39;;

　　// or

　　document.body.className += &#39; hasJS&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HTML 5还提供一个classList对象，功能更强大（IE 9不支持）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　document.body.classList.add(&#39;hasJS&#39;);

　　document.body.classList.remove(&#39;hasJS&#39;);

　　document.body.classList.toggle(&#39;hasJS&#39;);

　　document.body.classList.contains(&#39;hasJS&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自己动手实现addClass方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  nodes.addClass = function(classes) {
    for (let i = 0; i &amp;lt; nodes.length;i++) {
      nodes[i].classList.add(classes)
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;settext方法&#34;&gt;setText方法&lt;/h1&gt;
&lt;p&gt;改变textContent的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  nodes.setText = function(text) {
    for (let i = 0; i &amp;lt; nodes.length; i++) {
      nodes[i].textContent = text
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.jQuery = function(nodeOrSelector) {
  let nodes = {}
  if (typeof nodeOrSelector === &#39;string&#39;) {
    let temp = document.querySelectorAll(nodeOrSelector)
    for (let i = 0; i &amp;lt; temp.length; i++) {
      nodes[i] = temp[i]
    }
    nodes.length = temp.length
  } else if (nodeOrSelector instanceof Node) {
    nodes = {
      0: nodeOrSelector,
      length: 1
    }
  }
  nodes.addClass = function(classes) {
    for (let i = 0; i &amp;lt; nodes.length;i++) {
      nodes[i].classList.add(classes)
    }
  }
  nodes.setText = function(text) {
    for (let i = 0; i &amp;lt; nodes.length; i++) {
      nodes[i].textContent = text
    }
  }
  return nodes
}
window.$ = jQuery

var $div = $(&#39;div&#39;)
$div.addClass(&#39;red&#39;) // 可将所有 div 的 class 添加一个 red
$div.setText(&#39;hi&#39;) // 可将所有 div 的 textContent 变为 hi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;参考资料：阮一峰-&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/05/jquery-free.html&#34;&gt;如何做到jQuery&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>JS函数的五种声明方式</title>
                <link>https://example.com/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E4%BA%94%E7%A7%8D%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F/</link>
                <guid isPermaLink="true">https://example.com/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E4%BA%94%E7%A7%8D%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F/</guid>
                <pubDate>Wed, 17 Apr 2019 17:58:27 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;具名函数&#34;&gt;具名函数&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;function f(x,y){return x +y }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关键字+函数名+参数+{}
function 和var意思差不多，表示声明一个特殊的变量（对象）&lt;/p&gt;
&lt;h1 id=&#34;匿名函数&#34;&gt;匿名函数&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;f = function(x,y){return x +y }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;给变量赋值一个具名函数&#34;&gt;给变量赋值一个具名函数&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;f = function n(x,y){return x +y }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;函数n的作用域只限函数内，和具名函数不同，体现了JS的不一致性，不建议使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;函数对象&#34;&gt;函数对象&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;window.Fuction函数对象
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;new Fuction (&#39;x&#39;,&#39;y&#39;,&#39;return x + y &#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;var n = 1
new Fuction (&#39;x&#39;,&#39;y&#39;,&#39;return x&#39; +n+ &#39;return y &#39;)
f(1,2)
//4
//等同于
//new Fuction (&#39;x&#39;,&#39;y&#39;,&#39;return x+n+ y&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;箭头函数&#34;&gt;箭头函数&lt;/h1&gt;
&lt;p&gt;箭头函数都是匿名函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f=(x,y) =&amp;gt; { return x + y}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;sum = (x,y) =&amp;gt; {return x + y}
sum(1,2)
//3
sum(2,4)
//6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简化  return和{}必须同时省略&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sum = (x,y) =&amp;gt; x + y
sum(1,2)
//3
sum(2,4)
//6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果只有一个参数的情况下可以这样写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = n =&amp;gt; n*n
n(2)
//4
n(3)
//9
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>JS数组API运用相关代码总结</title>
                <link>https://example.com/posts/js%E6%95%B0%E7%BB%84api%E8%BF%90%E7%94%A8%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://example.com/posts/js%E6%95%B0%E7%BB%84api%E8%BF%90%E7%94%A8%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Mon, 15 Apr 2019 19:13:22 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;自己总结代码题&#34;&gt;自己总结代码题&lt;/h1&gt;
&lt;p&gt;1.使得 students 按分数的高低从大到小排列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var students = [&#39;小明&#39;,&#39;小红&#39;,&#39;小花&#39;] var scores = { 小明: 59, 小红: 99, 小花: 80 } students.sort(???)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请填写 ??? 使得 students 按分数的高低从大到小排列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function ( x , y ) {
    return scores[y]-scores[x]
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;var a = [1,2,3,4,5,6,7,8,9]
a.filter(???).map(???) // [4,16,36,64]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;获取所有偶数&lt;/li&gt;
&lt;li&gt;得到所有偶数的平方&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;a.filter( function ( value , key ) {
    return value % 2 === 0
    }).map ( function ( value ) {
        return value * value
        })
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;var a = [1,2,3,4,5,6,7,8,9]
a.reduce(???,???)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;计算所有奇数的和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a.reduce(function(sum,b){
    if( b % 2 !=0){
        sum = sum + b
    }return sum
    },0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;数组求和，一般我们的想法都是去遍历数组各项，然后累加。
那就是这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; function sumArr(arr){
      var sum = 0;
      for(var i = 0;i&amp;lt;=arr.length;i++){
    sum += arr[i];//前提是arr中各项是数字，而不是数字字符串
//如果是数字字符串：sum += Number(arr[i]);
    }
  return sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;又或者是forEach遍历：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sumArr(arr){
        var sum = 0;
        arr.forEach(function(val,index,arr){
              sum += val;
        })
    return sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一种比较黑科技的写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sumArr(arr){
        return eval(arr.join(&amp;quot;+&amp;quot;)) 
}//直接把他变成各个数的加法运算字符串
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然还有这种被人广泛称赞的函数式编程的写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sumArr(arr){
        return arr.reduce(function(prev,cur){
            return prev + cur;
        },0);
}
//reduce方法有两个参数，一个是callbackfunction(回调函数)，
//二是设置prev的初始类型和初始值
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;concat&#34;&gt;concat&lt;/h1&gt;
&lt;p&gt;concat() 方法用于连接两个或多个数组。&lt;/p&gt;
&lt;p&gt;该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayObject.concat(arrayX,arrayX,......,arrayX)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。&lt;/p&gt;
&lt;h1 id=&#34;foreach&#34;&gt;forEach&lt;/h1&gt;
&lt;p&gt;forEachfindIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回1。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.forEach(function callback(currentValue, index, array) {
    //your iterator
}[, thisArg]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;callback：回调函数。&lt;/p&gt;
&lt;p&gt;currentValue：在数组中处理当前元素&lt;/p&gt;
&lt;p&gt;index：在数组中处理当前元素的索引。&lt;/p&gt;
&lt;p&gt;array：当前数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];

a.forEach(function(element) {
    console.log(element);
});

// a
// b
// c
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;join&#34;&gt;join&lt;/h1&gt;
&lt;p&gt;join()将数组中的所有元素(或类似数组的对象)连接到一个字符串中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.join()
arr.join(separator)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;separator：分隔符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = [&#39;Wind&#39;, &#39;Rain&#39;, &#39;Fire&#39;];
a.join();    // &#39;Wind,Rain,Fire&#39;
a.join(&#39;-&#39;); // &#39;Wind-Rain-Fire&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;keys&#34;&gt;keys&lt;/h1&gt;
&lt;p&gt;keys()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.keys()
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;map&#34;&gt;map&lt;/h1&gt;
&lt;p&gt;map()方法创建一个新的数组，该数组的结果是调用调用数组中的每个元素的函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var new_array = arr.map(function callback(currentValue, index, array) {
    // Return element for new_array
}[, thisArg])
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;reduce&#34;&gt;reduce&lt;/h1&gt;
&lt;p&gt;reduce()方法对累加器和数组中的每个元素(从左到右)使用一个函数，以将其还原为一个值&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>JS的数组与伪数组的区别</title>
                <link>https://example.com/posts/js%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8E%E4%BC%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
                <guid isPermaLink="true">https://example.com/posts/js%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8E%E4%BC%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
                <pubDate>Sat, 13 Apr 2019 17:28:10 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在JavaScript中，除了6种原始数据类型之外，其他所有的都是对象，包括函数（Function）。&lt;/p&gt;
&lt;p&gt;基本数据类型：String,boolean,Number,Undefined, Null,Symbol&lt;/p&gt;
&lt;p&gt;引用数据类型：Object(Array,Date,RegExp,Function)&lt;/p&gt;
&lt;p&gt;在这个前提下，咱们再来讨论JavaScript的对象。&lt;/p&gt;
&lt;h1 id=&#34;创建对象&#34;&gt;创建对象&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;var obj = {}; //种方式创建对象，被称之为对象直接量（Object Literal）
var obj = new Object(); // 创建一个空对象，和{}一样
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;创建数组&#34;&gt;创建数组&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;var arr = [];//这是使用数组直接量（Array Literal）创建数组
var arr = new Array();//构造函数Array() 创建数组对象
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;对象与数组的关系&#34;&gt;对象与数组的关系&lt;/h1&gt;
&lt;p&gt;在说区别之前，需要先提到另外一个知识，就是JavaScript的原型继承。所有JavaScript的内置构造函数都是继承自 Object.prototype。在这个前提下，可以理解为使用 new Array() 或 [] 创建出来的数组对象，都会拥有 Object.prototype 的属性值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = {};// 拥有Object.prototype的属性值
var arr = [];
//使用数组直接量创建的数组，由于Array.prototype的属性继承自 Object.prototype，
//那么，它将同时拥有Array.prototype和Object.prototype的属性值
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以得到对象和数组的第一个区别：对象没有数组Array.prototype的属性值&lt;/p&gt;
&lt;h1 id=&#34;什么是数组&#34;&gt;什么是数组&lt;/h1&gt;
&lt;p&gt;数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = {};
var arr = [];
 
obj[2] = &#39;a&#39;;
arr[2] = &#39;a&#39;;
 
console.log(obj[2]); // 输出 a
console.log(arr[2]); // 输出 a
console.log(obj.length); // 输出 undefined
console.log(arr.length); // 输出 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上面这个测试，可以看到，虽然 obj[2]与arr[2] 都输出&#39;a&#39;，但是，在输出length上有明显的差异，这是为什么呢？&lt;/p&gt;
&lt;h2 id=&#34;obj2与arr2的区别&#34;&gt;obj[2]与arr[2]的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;obj[2]输出&#39;a&#39;，是因为对象就是普通的键值对存取数据&lt;/li&gt;
&lt;li&gt;而arr[2]输出&#39;a&#39;则不同，数组是通过索引来存取数据，arr[2]之所以输出&#39;a&#39;，是因为数组arr索引2的位置已经存储了数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;objlength与arrlength的区别&#34;&gt;obj.length与arr.length的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined&lt;/li&gt;
&lt;li&gt;而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么arrlength输出3而不是1呢&#34;&gt;为什么arr.length输出3，而不是1呢？&lt;/h2&gt;
&lt;p&gt;这是由于数组的特殊实现机制，对于普通的数组，如果它的索引是从0开始连续的，那么length的值就会等于数组中元素个数&lt;/p&gt;
&lt;p&gt;而对于上面例子中arr，在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数，那么我们称之为稀疏数组。&lt;/p&gt;
&lt;h1 id=&#34;伪数组&#34;&gt;伪数组&lt;/h1&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拥有length属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)&lt;/li&gt;
&lt;li&gt;不具有数组所具有的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;伪数组，就是像数组一样有 length 属性，也有 0、1、2、3 等属性的对象，看起来就像数组一样，但不是数组，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var fakeArray = {
    length: 3,
    &amp;quot;0&amp;quot;: &amp;quot;first&amp;quot;,
    &amp;quot;1&amp;quot;: &amp;quot;second&amp;quot;,
    &amp;quot;2&amp;quot;: &amp;quot;third&amp;quot;
};
 
for (var i = 0; i &amp;lt; fakeArray.length; i++) {
    console.log(fakeArray[i]);
}
 
Array.prototype.join.call(fakeArray,&#39;+&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常见的参数的参数 arguments，DOM 对象列表（比如通过 document.getElementsByTags 得到的列表），jQuery 对象（比如 $(&amp;quot;div&amp;quot;)）。&lt;/p&gt;
&lt;p&gt;伪数组是一个 Object，而真实的数组是一个 Array&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fakeArray instanceof Array === false;
Object.prototype.toString.call(fakeArray) === &amp;quot;[object Object]&amp;quot;;
 
var arr = [1,2,3,4,6];
arr instanceof Array === true;
Object.prototype.toString.call(arr) === &amp;quot;[object Array]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码用来判断一个对象是否属于“类数组”。如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Determine if o is an array-like object.
// Strings and functions have numeric length properties, but are
// excluded by the typeof test. In client-side JavaScript, DOM text
// nodes have a numeric length property, and may need to be excluded
// with an additional o.nodeType != 3 test.
function isArrayLike(o) {   
    if (o &amp;amp;&amp;amp;                                // o is not null, undefined, etc.
            typeof o === &#39;object&#39; &amp;amp;&amp;amp;            // o is an object
            isFinite(o.length) &amp;amp;&amp;amp;               // o.length is a finite number
            o.length &amp;gt;= 0 &amp;amp;&amp;amp;                    // o.length is non-negative
            o.length===Math.floor(o.length) &amp;amp;&amp;amp;  // o.length is an integer
            o.length &amp;lt; 4294967296)              // o.length &amp;lt; 2^32
            return true;                        // Then o is array-like
    else
            return false;                       // Otherwise it is not
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过有个更简单的办法来判断，用 Array.isArray&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Array.isArray(fakeArray) === false;
Array.isArray(arr) === true;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从外观上看伪数组，看不出来它与数组的区别，在JavaScript内置对象中常见的伪数组就是大名鼎鼎的auguments：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function() {
  console.log(typeof arguments); // 输出 object，它并不是一个数组
}());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外在DOM对象中，childNodes也是伪数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(typeof document.body.childNodes); // 输出 object
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除此之外，还有很多常用的伪数组，就不一一列举。&lt;/p&gt;
&lt;p&gt;伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多算法，比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = Array.prototype.slice.call(arguments)
 
或者
var arr = Array.prototype.slice.call(arguments, 0); // 将arguments对象转换成一个真正的数组
 
Array.prototype.forEach.call(arguments, function(v) {
  // 循环arguments对象
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了使用 Array.prototype.slice.call(arguments)，你也可以简单的使用[].slice.call(arguments) 来代替。另外，你可以使用 bind 来简化该过程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var unboundSlice = Array.prototype.slice;
var slice = Function.prototype.call.bind(unboundSlice);
 
function list() {
  return slice(arguments);
}
 
var list1 = list(1, 2, 3); // [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将具有length属性的对象转换成数组对象，arguments是每个函数在运行的时候自动获得的一个近似数组的对象（传入函数的参数从0开始按数字排列，而且有length）。&lt;/p&gt;
&lt;p&gt;比如当你 func(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) 的时候，func里面获得的arguments[0] 是 &#39;a&#39;，arguments[1] 是 &#39;b&#39;，依次类推。但问题在于这个arguments对象其实并不是Array，所以没有slice方法。Array.prototype.slice.call( )可以间接对其实现slice的效果，而且返回的结果是真正的Array。&lt;/p&gt;
&lt;p&gt;对于IE9以前的版本(DOM实现基于COM)，我们可以使用makeArray来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 伪数组转化成数组
var makeArray = function(obj) {   
    if (!obj || obj.length === 0) {       
        return [];
    }   
    // 非伪类对象，直接返回最好
    if (!obj.length) {       
        return obj;
    }   
    // 针对IE8以前 DOM的COM实现
    try {       
        return [].slice.call(obj);
    } catch (e) {       
        var i = 0,
            j = obj.length,
            res = [];       
        for (; i &amp;lt; j; i++) {
            res.push(obj[i]);
        }
        return res;
    }
 
};
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;对象没有数组Array.prototype的属性值，类型是Object，而数组类型是Array；&lt;/p&gt;
&lt;p&gt;数组是基于索引的实现，length会自动更新，而对象是键值对；&lt;/p&gt;
&lt;p&gt;使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法；&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>常见DOM以及API总结</title>
                <link>https://example.com/posts/%E5%B8%B8%E8%A7%81dom%E4%BB%A5%E5%8F%8Aapi%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://example.com/posts/%E5%B8%B8%E8%A7%81dom%E4%BB%A5%E5%8F%8Aapi%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Fri, 12 Apr 2019 10:41:20 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;dom&#34;&gt;DOM&lt;/h1&gt;
&lt;p&gt;DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。&lt;/p&gt;
&lt;p&gt;浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。&lt;/p&gt;
&lt;p&gt;DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。&lt;/p&gt;
&lt;h1 id=&#34;node-接口&#34;&gt;Node 接口&lt;/h1&gt;
&lt;h2 id=&#34;nodeprototypenodetype&#34;&gt;Node.prototype.nodeType&lt;/h2&gt;
&lt;p&gt;nodeType属性返回一个整数值，表示节点的类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.nodeType // 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，文档节点的类型值为9。&lt;/p&gt;
&lt;p&gt;Node 对象定义了几个常量，对应这些类型值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.nodeType === Node.DOCUMENT_NODE // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，文档节点的nodeType属性等于常量Node.DOCUMENT_NODE。&lt;/p&gt;
&lt;p&gt;不同节点的nodeType属性值和对应的常量如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档节点（document）：9，对应常量Node.DOCUMENT_NODE&lt;/li&gt;
&lt;li&gt;元素节点（element）：1，对应常量Node.ELEMENT_NODE&lt;/li&gt;
&lt;li&gt;属性节点（attr）：2，对应常量Node.ATTRIBUTE_NODE&lt;/li&gt;
&lt;li&gt;文本节点（text）：3，对应常量Node.TEXT_NODE&lt;/li&gt;
&lt;li&gt;文档片断节点（DocumentFragment）：11，对应常量Node.DOCUMENT_FRAGMENT_NODE&lt;/li&gt;
&lt;li&gt;文档类型节点（DocumentType）：10，对应常量Node.DOCUMENT_TYPE_NODE&lt;/li&gt;
&lt;li&gt;注释节点（Comment）：8，对应常量Node.COMMENT_NODE
确定节点类型时，使用nodeType属性是常用方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var node = document.documentElement.firstChild;
if (node.nodeType === Node.ELEMENT_NODE) {
  console.log(&#39;该节点是元素节点&#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nodeprototypenodename&#34;&gt;Node.prototype.nodeName&lt;/h2&gt;
&lt;p&gt;nodeName属性返回节点的名称。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// HTML 代码如下
// &amp;lt;div id=&amp;quot;d1&amp;quot;&amp;gt;hello world&amp;lt;/div&amp;gt;
var div = document.getElementById(&#39;d1&#39;);
div.nodeName // &amp;quot;DIV&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，元素节点&lt;div&gt;的nodeName属性就是大写的标签名DIV。&lt;/p&gt;
&lt;p&gt;不同节点的nodeName属性值如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档节点（document）：#document&lt;/li&gt;
&lt;li&gt;元素节点（element）：大写的标签名&lt;/li&gt;
&lt;li&gt;属性节点（attr）：属性的名称&lt;/li&gt;
&lt;li&gt;文本节点（text）：#text&lt;/li&gt;
&lt;li&gt;文档片断节点（DocumentFragment）：#document-fragment&lt;/li&gt;
&lt;li&gt;文档类型节点（DocumentType）：文档的类型&lt;/li&gt;
&lt;li&gt;注释节点（Comment）：#comment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nodeprototypenodevalue&#34;&gt;Node.prototype.nodeValue&lt;/h2&gt;
&lt;p&gt;nodeValue属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。&lt;/p&gt;
&lt;p&gt;只有文本节点（text）、注释节点（comment）和属性节点（attr）有文本值，因此这三类节点的nodeValue可以返回结果，其他类型的节点一律返回null。同样的，也只有这三类节点可以设置nodeValue属性的值，其他类型的节点设置无效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// HTML 代码如下
// &amp;lt;div id=&amp;quot;d1&amp;quot;&amp;gt;hello world&amp;lt;/div&amp;gt;
var div = document.getElementById(&#39;d1&#39;);
div.nodeValue // null
div.firstChild.nodeValue // &amp;quot;hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，div是元素节点，nodeValue属性返回null。div.firstChild是文本节点，所以可以返回文本值。&lt;/p&gt;
&lt;h2 id=&#34;nodeprototypetextcontent&#34;&gt;Node.prototype.textContent&lt;/h2&gt;
&lt;p&gt;textContent属性返回当前节点和它的所有后代节点的文本内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// HTML 代码为
// &amp;lt;div id=&amp;quot;divA&amp;quot;&amp;gt;This is &amp;lt;span&amp;gt;some&amp;lt;/span&amp;gt; text&amp;lt;/div&amp;gt;

document.getElementById(&#39;divA&#39;).textContent
// This is some text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;textContent属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。&lt;/p&gt;
&lt;p&gt;该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。它还有一个好处，就是自动对 HTML 标签转义。这很适合用于用户提供的内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.getElementById(&#39;foo&#39;).textContent = &#39;&amp;lt;p&amp;gt;GoodBye!&amp;lt;/p&amp;gt;&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码在插入文本时，会将&lt;p&gt;标签解释为文本，而不会当作标签处理。&lt;/p&gt;
&lt;p&gt;对于文本节点（text）、注释节点（comment）和属性节点（attr），textContent属性的值与nodeValue属性相同。对于其他类型的节点，该属性会将每个子节点（不包括注释节点）的内容连接在一起返回。如果一个节点没有子节点，则返回空字符串。&lt;/p&gt;
&lt;p&gt;文档节点（document）和文档类型节点（doctype）的textContent属性为null。如果要读取整个文档的内容，可以使用document.documentElement.textContent。&lt;/p&gt;
&lt;h2 id=&#34;nodeprototypebaseuri&#34;&gt;Node.prototype.baseURI&lt;/h2&gt;
&lt;p&gt;baseURI属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 当前网页的网址为
// http://www.example.com/index.html
document.baseURI
// &amp;quot;http://www.example.com/index.html&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果无法读到网页的 URL，baseURI属性返回null。&lt;/p&gt;
&lt;p&gt;该属性的值一般由当前网址的 URL（即window.location属性）决定，但是可以使用 HTML 的&lt;base&gt;标签，改变该属性的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;base href=&amp;quot;http://www.example.com/page.html&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置了以后，baseURI属性就返回&lt;base&gt;标签设置的值。&lt;/p&gt;
&lt;h2 id=&#34;nodeprototypeownerdocument&#34;&gt;Node.prototype.ownerDocument&lt;/h2&gt;
&lt;p&gt;Node.ownerDocument属性返回当前节点所在的顶层文档对象，即document对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d = p.ownerDocument;
d === document // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;document对象本身的ownerDocument属性，返回null。&lt;/p&gt;
&lt;h2 id=&#34;nodeprototypenextsibling&#34;&gt;Node.prototype.nextSibling&lt;/h2&gt;
&lt;p&gt;Node.nextSibling属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回null。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// HTML 代码如下
// &amp;lt;div id=&amp;quot;d1&amp;quot;&amp;gt;hello&amp;lt;/div&amp;gt;&amp;lt;div id=&amp;quot;d2&amp;quot;&amp;gt;world&amp;lt;/div&amp;gt;
var d1 = document.getElementById(&#39;d1&#39;);
var d2 = document.getElementById(&#39;d2&#39;);

d1.nextSibling === d2 // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，d1.nextSibling就是紧跟在d1后面的同级节点d2。&lt;/p&gt;
&lt;p&gt;注意，该属性还包括文本节点和注释节点（&lt;!-- comment --&gt;）。因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。&lt;/p&gt;
&lt;p&gt;nextSibling属性可以用来遍历所有子节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var el = document.getElementById(&#39;div1&#39;).firstChild;

while (el !== null) {
  console.log(el.nodeName);
  el = el.nextSibling;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码遍历div1节点的所有子节点。&lt;/p&gt;
&lt;h1 id=&#34;nodelist-接口&#34;&gt;NodeList 接口&lt;/h1&gt;
&lt;p&gt;NodeList实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到NodeList实例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.childNodes&lt;/li&gt;
&lt;li&gt;document.querySelectorAll()等节点搜索方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;document.body.childNodes instanceof NodeList // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NodeList实例很像数组，可以使用length属性和forEach方法。但是，它不是数组，不能使用pop或push之类数组特有的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var children = document.body.childNodes;

Array.isArray(children) // false

children.length // 34
children.forEach(console.log)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，NodeList 实例children不是数组，但是具有length属性和forEach方法。&lt;/p&gt;
&lt;p&gt;如果NodeList实例要使用数组方法，可以将其转为真正的数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var children = document.body.childNodes;
var nodeArr = Array.prototype.slice.call(children);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了使用forEach方法遍历 NodeList 实例，还可以使用for循环。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var children = document.body.childNodes;

for (var i = 0; i &amp;lt; children.length; i++) {
  var item = children[i];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，NodeList 实例可能是动态集合，也可能是静态集合。所谓动态集合就是一个活的集合，DOM 删除或新增一个相关节点，都会立刻反映在 NodeList 实例。目前，只有Node.childNodes返回的是一个动态集合，其他的 NodeList 都是静态集合。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var children = document.body.childNodes;
children.length // 18
document.body.appendChild(document.createElement(&#39;p&#39;));
children.length // 19
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，文档增加一个子节点，NodeList 实例children的length属性就增加了1。&lt;/p&gt;
&lt;h2 id=&#34;nodelistprototypelength&#34;&gt;NodeList.prototype.length&lt;/h2&gt;
&lt;p&gt;length属性返回 NodeList 实例包含的节点数量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.querySelectorAll(&#39;xxx&#39;).length
// 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，document.querySelectorAll返回一个 NodeList 集合。对于那些不存在的 HTML 标签，length属性返回0。&lt;/p&gt;
&lt;h2 id=&#34;nodelistprototypeforeach&#34;&gt;NodeList.prototype.forEach()&lt;/h2&gt;
&lt;p&gt;forEach方法用于遍历 NodeList 的所有成员。它接受一个回调函数作为参数，每一轮遍历就执行一次这个回调函数，用法与数组实例的forEach方法完全一致。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var children = document.body.childNodes;
children.forEach(function f(item, i, list) {
  // ...
}, this);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，回调函数f的三个参数依次是当前成员、位置和当前 NodeList 实例。forEach方法的第二个参数，用于绑定回调函数内部的this，该参数可省略。&lt;/p&gt;
&lt;h2 id=&#34;nodelistprototypeitem&#34;&gt;NodeList.prototype.item()&lt;/h2&gt;
&lt;p&gt;item方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.body.childNodes.item(0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，item(0)返回第一个成员。&lt;/p&gt;
&lt;p&gt;如果参数值大于实际长度，或者索引不合法（比如负数），item方法返回null。如果省略参数，item方法会报错。&lt;/p&gt;
&lt;p&gt;所有类似数组的对象，都可以使用方括号运算符取出成员。一般情况下，都是使用方括号运算符，而不使用item方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.body.childNodes[0]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nodelistprototypekeysnodelistprototypevaluesnodelistprototypeentries&#34;&gt;NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()&lt;/h2&gt;
&lt;p&gt;这三个方法都返回一个 ES6 的遍历器对象，可以通过for...of循环遍历获取每一个成员的信息。区别在于，keys()返回键名的遍历器，values()返回键值的遍历器，entries()返回的遍历器同时包含键名和键值的信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var children = document.body.childNodes;

for (var key of children.keys()) {
  console.log(key);
}
// 0
// 1
// 2
// ...

for (var value of children.values()) {
  console.log(value);
}
// #text
// &amp;lt;script&amp;gt;
// ...

for (var entry of children.entries()) {
  console.log(entry);
}
// Array [ 0, #text ]
// Array [ 1, &amp;lt;script&amp;gt; ]
// ...
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;parentnode-接口&#34;&gt;ParentNode 接口&lt;/h1&gt;
&lt;p&gt;如果当前节点是父节点，就会继承ParentNode接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会继承ParentNode接口。&lt;/p&gt;
&lt;h2 id=&#34;parentnodechildren&#34;&gt;ParentNode.children&lt;/h2&gt;
&lt;p&gt;children属性返回一个HTMLCollection实例，成员是当前节点的所有元素子节点。该属性只读。&lt;/p&gt;
&lt;p&gt;下面是遍历某个节点的所有元素子节点的示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; el.children.length; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，children属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。如果没有元素类型的子节点，返回值HTMLCollection实例的length属性为0。&lt;/p&gt;
&lt;p&gt;另外，HTMLCollection是动态集合，会实时反映 DOM 的任何变化。&lt;/p&gt;
&lt;h2 id=&#34;parentnodefirstelementchild&#34;&gt;ParentNode.firstElementChild&lt;/h2&gt;
&lt;p&gt;firstElementChild属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回null。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.firstElementChild.nodeName
// &amp;quot;HTML&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，document节点的第一个元素子节点是&lt;HTML&gt;。&lt;/p&gt;
&lt;h2 id=&#34;parentnodelastelementchild&#34;&gt;ParentNode.lastElementChild&lt;/h2&gt;
&lt;p&gt;lastElementChild属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回null。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.lastElementChild.nodeName
// &amp;quot;HTML&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，document节点的最后一个元素子节点是&lt;HTML&gt;（因为document只包含这一个元素子节点）。&lt;/p&gt;
&lt;h2 id=&#34;parentnodechildelementcount&#34;&gt;ParentNode.childElementCount&lt;/h2&gt;
&lt;p&gt;childElementCount属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回0。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.body.childElementCount // 13
ParentNode.append()，ParentNode.prepend()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;append方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。&lt;/p&gt;
&lt;p&gt;该方法不仅可以添加元素子节点，还可以添加文本子节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var parent = document.body;

// 添加元素子节点
var p = document.createElement(&#39;p&#39;);
parent.append(p);

// 添加文本子节点
parent.append(&#39;Hello&#39;);

// 添加多个元素子节点
var p1 = document.createElement(&#39;p&#39;);
var p2 = document.createElement(&#39;p&#39;);
parent.append(p1, p2);

// 添加元素子节点和文本子节点
var p = document.createElement(&#39;p&#39;);
parent.append(&#39;Hello&#39;, p);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，该方法没有返回值。&lt;/p&gt;
&lt;p&gt;prepend方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。它的用法与append方法完全一致，也是没有返回值。&lt;/p&gt;
&lt;h1 id=&#34;childnode-接口&#34;&gt;ChildNode 接口&lt;/h1&gt;
&lt;p&gt;remove方法用于从父节点移除当前节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;el.remove()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码在 DOM 里面移除了el节点。&lt;/p&gt;
&lt;h2 id=&#34;childnodebeforechildnodeafter&#34;&gt;ChildNode.before()，ChildNode.after()&lt;/h2&gt;
&lt;p&gt;before方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。&lt;/p&gt;
&lt;p&gt;注意，该方法不仅可以插入元素节点，还可以插入文本节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = document.createElement(&#39;p&#39;);
var p1 = document.createElement(&#39;p&#39;);

// 插入元素节点
el.before(p);

// 插入文本节点
el.before(&#39;Hello&#39;);

// 插入多个元素节点
el.before(p, p1);

// 插入元素节点和文本节点
el.before(p, &#39;Hello&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;after方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。用法与before方法完全相同。&lt;/p&gt;
&lt;h2 id=&#34;childnodereplacewith&#34;&gt;ChildNode.replaceWith()&lt;/h2&gt;
&lt;p&gt;replaceWith方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var span = document.createElement(&#39;span&#39;);
el.replaceWith(span);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，el节点将被span节点替换。&lt;/p&gt;
&lt;h1 id=&#34;节点创建型api&#34;&gt;节点创建型api&lt;/h1&gt;
&lt;p&gt;在这里，我将常用的DOM操作api进行分类，首先要介绍的是创建型的api。这一类型的api，简而言之就是用来创建节点的。&lt;/p&gt;
&lt;h2 id=&#34;createelement&#34;&gt;&lt;strong&gt;createElement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;createElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签。
使用如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var div = document.createElement(&amp;quot;div&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。&lt;/p&gt;
&lt;h2 id=&#34;createtextnode&#34;&gt;&lt;strong&gt;createTextNode&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;createTextNode用来创建一个文本节点，用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var textNode = document.createTextNode(&amp;quot;一个TextNode&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;createTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中&lt;/p&gt;
&lt;h2 id=&#34;clonenode&#34;&gt;cloneNode&lt;/h2&gt;
&lt;p&gt;cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var parent = document.getElementById(&amp;quot;parentElement&amp;quot;); 
var parent2 = parent.cloneNode(true);// 传入true
parent2.id = &amp;quot;parent2&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码通过cloneNode复制了一份parent元素，其中cloneNode的参数为true，表示parent的子节点也被复制，如果传入false，则表示只复制了parent节点。
我们看看这个例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;parent&amp;quot;&amp;gt;
    我是父元素的文本
    &amp;lt;br/&amp;gt;
    &amp;lt;span&amp;gt;
        我是子元素
    &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;button id=&amp;quot;btnCopy&amp;quot;&amp;gt;复制&amp;lt;/button&amp;gt;

var parent = document.getElementById(&amp;quot;parent&amp;quot;);
document.getElementById(&amp;quot;btnCopy&amp;quot;).onclick = function(){
	var parent2 = parent.cloneNode(true);
	parent2.id = &amp;quot;parent2&amp;quot;;
	document.body.appendChild(parent2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码很简单，主要是绑定button事件，事件内容是复制了一个parent，修改其id，然后添加到文档中。
这里有几点要注意：
（1）和createElement一样，cloneNode创建的节点只是游离有html文档外的节点，要调用appendChild方法才能添加到文档树中
（2）如果复制的元素有id，则其副本同样会包含该id，由于id具有唯一性，所以在复制节点后必须要修改其id
（3）调用接收的bool参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同&lt;/p&gt;
&lt;p&gt;除此之外，我们还有一个需要注意的点：
如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：
（1）如果是通过addEventListener或者比如onclick进行绑定事件，则副本节点不会绑定该事件
（2）如果是内联方式绑定比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div onclick=&amp;quot;showParent()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样的话，副本节点同样会触发事件。&lt;/p&gt;
&lt;h2 id=&#34;createdocumentfragment&#34;&gt;createDocumentFragment&lt;/h2&gt;
&lt;p&gt;createDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中。
createDocumentFragment方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中，比如示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;list&amp;quot;&amp;gt;&amp;lt;/ul&amp;gt;
&amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;添加多项&amp;quot; id=&amp;quot;btnAdd&amp;quot; /&amp;gt;

document.getElementById(&amp;quot;btnAdd&amp;quot;).onclick = function(){
	var list = document.getElementById(&amp;quot;list&amp;quot;);
	for(var i = 0;i &amp;lt; 100; i++){
		var li = document.createElement(&amp;quot;li&amp;quot;);
		li.textContent = i;
		list.appendChild(li);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码将按钮绑定了一个事件，这个事件创建了100个li节点，然后依次将其添加HTML文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用createDocumentFragment了。
DocumentFragment不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.getElementById(&amp;quot;btnAdd&amp;quot;).onclick = function(){
	var list = document.getElementById(&amp;quot;list&amp;quot;);	
	var fragment = document.createDocumentFragment();

	for(var i = 0;i &amp;lt; 100; i++){
	  var li = document.createElement(&amp;quot;li&amp;quot;);
		li.textContent = i;
		fragment.appendChild(li);
	}

	list.appendChild(fragment);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;优化后的代码主要是创建了一个fragment，每次生成的li节点先添加到fragment，最后一次性添加到list，大家可以看示例&lt;/p&gt;
&lt;h2 id=&#34;创建型api总结&#34;&gt;创建型API总结&lt;/h2&gt;
&lt;p&gt;创建型api主要包括createElement，createTextNode，cloneNode和createDocumentFragment四个方法，需要注意下面几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它们创建的节点只是一个孤立的节点，要通过appendChild添加到文档中&lt;/li&gt;
&lt;li&gt;cloneNode要注意如果被复制的节点是否包含子节点以及事件绑定等问题&lt;/li&gt;
&lt;li&gt;使用createDocumentFragment来解决添加大量节点时的性能问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;页面修改型api&#34;&gt;页面修改型API&lt;/h1&gt;
&lt;p&gt;前面我们提到创建型api，它们只是创建节点，并没有真正修改到页面内容，而是要调用appendChild来将其添加到文档树中。我在这里将这类会修改到页面内容归为一类。
修改页面内容的api主要包括：appendChild，insertBefore，removeChild，replaceChild。&lt;/p&gt;
&lt;h2 id=&#34;appendchild&#34;&gt;appendChild&lt;/h2&gt;
&lt;p&gt;appendChild我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parent.appendChild(child);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;child节点将会作为parent节点的最后一个子节点。
appendChild这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面上，相当于把这个节点移动到另一个地方。我们来看例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;child&amp;quot;&amp;gt;
    要被添加的节点
&amp;lt;/div&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;div id=&amp;quot;parent&amp;quot;&amp;gt;
    要移动的位置
&amp;lt;/div&amp;gt;		
&amp;lt;input id=&amp;quot;btnMove&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;移动节点&amp;quot; /&amp;gt;

document.getElementById(&amp;quot;btnMove&amp;quot;).onclick = function(){
	var child = document.getElementById(&amp;quot;child&amp;quot;);
	document.getElementById(&amp;quot;parent&amp;quot;).appendChild(child);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码主要是获取页面上的child节点，然后添加到指定位置，可以看到原本的child节点被移动到parent中了。
这里还有一个要注意的点：如果child绑定了事件，被移动时，它依然绑定着该事件。&lt;/p&gt;
&lt;h2 id=&#34;insertbefore&#34;&gt;insertBefore&lt;/h2&gt;
&lt;p&gt;insertBefore用来添加一个节点到一个参照节点之前，用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parentNode.insertBefore(newNode,refNode);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;parentNode表示新节点被添加后的父节点
newNode表示要添加的节点
refNode表示参照节点，新节点会添加到这个节点之前
我们来看这个例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;parent&amp;quot;&amp;gt;
    父节点
    &amp;lt;div id=&amp;quot;child&amp;quot;&amp;gt;				
        子元素
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;insertNode&amp;quot; value=&amp;quot;插入节点&amp;quot; /&amp;gt;

var parent = document.getElementById(&amp;quot;parent&amp;quot;);
var child = document.getElementById(&amp;quot;child&amp;quot;);
document.getElementById(&amp;quot;insertNode&amp;quot;).onclick = function(){
	var newNode = document.createElement(&amp;quot;div&amp;quot;);
	newNode.textContent = &amp;quot;新节点&amp;quot;
	parent.insertBefore(newNode,child);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码创建了一个新节点，然后添加到child节点之前。
和appendChild一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事件。&lt;/p&gt;
&lt;p&gt;关于第二个参数参照节点还有几个注意的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;refNode是必传的，如果不传该参数会报错&lt;/li&gt;
&lt;li&gt;如果refNode是undefined或null，则insertBefore会将节点添加到子元素的末尾&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;removechild&#34;&gt;removeChild&lt;/h2&gt;
&lt;p&gt;removeChild顾名思义，就是删除指定的子节点并返回，用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var deletedChild = parent.removeChild(node);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;deletedChild指向被删除节点的引用，它等于node，被删除的节点仍然存在于内存中，可以对其进行下一步操作。
注意：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(node.parentNode){
    node.parentNode.removeChild(node);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过节点自己获取节点的父节点，然后将自身删除。&lt;/p&gt;
&lt;h2 id=&#34;replacechild&#34;&gt;replaceChild&lt;/h2&gt;
&lt;p&gt;replaceChild用于使用一个节点替换另一个节点，用法如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parent.replaceChild(newChild,oldChild);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;newChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置
oldChild是被替换的节点&lt;/p&gt;
&lt;p&gt;页面修改型API总结
页面修改型api主要是这四个接口，要注意几个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置&lt;/li&gt;
&lt;li&gt;节点本身绑定的事件会不会消失，会一直保留着。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;节点查询型api&#34;&gt;节点查询型API&lt;/h1&gt;
&lt;p&gt;节点查询型API也是非常常用的api，下面我们分别说明一下每一个api的使用。&lt;/p&gt;
&lt;h2 id=&#34;documentgetelementbyid&#34;&gt;document.getElementById&lt;/h2&gt;
&lt;p&gt;这个接口很简单，根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null。
使用这个接口有几点要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素的Id是大小写敏感的，一定要写对元素的id&lt;/li&gt;
&lt;li&gt;HTML文档中可能存在多个id相同的元素，则返回第一个元素&lt;/li&gt;
&lt;li&gt;只从文档中进行搜索元素，如果创建了一个元素并指定id，但并没有添加到文档中，则这个元素是不会被查找到的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;documentgetelementsbytagname&#34;&gt;document.getElementsByTagName&lt;/h2&gt;
&lt;p&gt;这个接口根据元素标签名获取元素，返回一个即时的HTMLCollection类型，什么是即时的HTMLCollection类型呢？我们来看看这个示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;div1&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;div2&amp;lt;/div&amp;gt;
		
&amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;显示数量&amp;quot; id=&amp;quot;btnShowCount&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;新增div&amp;quot; id=&amp;quot;btnAddDiv&amp;quot;/&amp;gt;	

var divList = document.getElementsByTagName(&amp;quot;div&amp;quot;);
document.getElementById(&amp;quot;btnAddDiv&amp;quot;).onclick = function(){
	var div = document.createElement(&amp;quot;div&amp;quot;);
	div.textContent =&amp;quot;div&amp;quot; + (divList.length+1);
	document.body.appendChild(div);
}
	
document.getElementById(&amp;quot;btnShowCount&amp;quot;).onclick = function(){
        alert(divList.length);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码中有两个按钮，一个按钮是显示HTMLCollection元素的个数，另一个按钮可以新增一个div标签到文档中。前面提到HTMLCollcetion元素是即时的表示该集合是随时变化的，也就是是文档中有几个div，它会随时进行变化，当我们新增一个div后，再访问HTMLCollection时，就会包含这个新增的div。
使用document.getElementsByTagName这个方法有几点要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果要对HTMLCollection集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率&lt;/li&gt;
&lt;li&gt;如果没有存在指定的标签，该接口返回的不是null，而是一个空的HTMLCollection&lt;/li&gt;
&lt;li&gt;“*”表示所有标签&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;documentgetelementsbyname&#34;&gt;document.getElementsByName&lt;/h2&gt;
&lt;p&gt;getElementsByName主要是通过指定的name属性来获取元素，它返回一个即时的NodeList对象。
使用这个接口主要要注意几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回对象是一个即时的NodeList，它是随时变化的&lt;/li&gt;
&lt;li&gt;在HTML元素中，并不是所有元素都有name属性，比如div是没有name属性的，但是如果强制设置div的name属性，它也是可以被查找到的&lt;/li&gt;
&lt;li&gt;在IE中，如果id设置成某个值，然后传入getElementsByName的参数值和id值一样，则这个元素是会被找到的，所以最好不好设置同样的值给id和name&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;documentgetelementsbyclassname&#34;&gt;document.getElementsByClassName&lt;/h2&gt;
&lt;p&gt;这个API是根据元素的class返回一个即时的HTMLCollection，用法如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var elements = document.getElementsByClassName(names);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个接口有下面几点要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回结果是一个即时的HTMLCollection，会随时根据文档结构变化&lt;/li&gt;
&lt;li&gt;IE9以下浏览器不支持&lt;/li&gt;
&lt;li&gt;如果要获取2个以上classname，可传入多个classname，每个用空格相隔，例如&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;var elements = document.getElementsByClassName(&amp;quot;test1 test2&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;document.querySelector和document.querySelectorAll
这两个api很相似，通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。
首先来介绍一下document.querySelector。
document.querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。
注意，由于返回的是第一个匹配的元素，这个api使用的深度优先搜索来获取元素。我们来看这个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;span class=&amp;quot;test&amp;quot;&amp;gt;第三级的span&amp;lt;/span&amp;gt;	
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;test&amp;quot;&amp;gt;			
    同级的第二个div
&amp;lt;/div&amp;gt;
&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btnGet&amp;quot; value=&amp;quot;获取test元素&amp;quot; /&amp;gt;

document.getElementById(&amp;quot;btnGet&amp;quot;).addEventListener(&amp;quot;click&amp;quot;,function(){
	var element = document.querySelector(&amp;quot;.test&amp;quot;);
	alert(element.textContent);
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子很简单，就是两个class都包含“test”的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过querySelector获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素。&lt;/p&gt;
&lt;p&gt;document.querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，我们来看看下面这个例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;test&amp;quot;&amp;gt;
    class为test
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;test&amp;quot;&amp;gt;
    id为test
&amp;lt;/div&amp;gt;
&amp;lt;input id=&amp;quot;btnShow&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;显示内容&amp;quot; /&amp;gt;

document.getElementById(&amp;quot;btnShow&amp;quot;).addEventListener(&amp;quot;click&amp;quot;,function(){
	var elements = document.querySelectorAll(&amp;quot;#test,.test&amp;quot;);	
	for(var i = 0,length = elements.length;i&amp;lt;length;i++){
		alert(elements[i].textContent);
	}	
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码通过querySelectorAll，使用id选择器和class选择器选择了两个元素，并依次输出其内容。要注意两点：
（1）querySelectorAll也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关
（2）返回的是一个非即时的NodeList，也就是说结果不会随着文档树的变化而变化&lt;/p&gt;
&lt;p&gt;兼容性问题：querySelector和querySelectorAll在ie8以下的浏览器不支持。&lt;/p&gt;
&lt;h1 id=&#34;节点关系型api&#34;&gt;节点关系型api&lt;/h1&gt;
&lt;p&gt;在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。&lt;/p&gt;
&lt;h2 id=&#34;父关系型api&#34;&gt;父关系型api&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。&lt;/li&gt;
&lt;li&gt;parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;兄弟关系型api&#34;&gt;兄弟关系型api&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;子关系型api&#34;&gt;子关系型api&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;childNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。&lt;/li&gt;
&lt;li&gt;children：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。&lt;/li&gt;
&lt;li&gt;firstNode：第一个子节点&lt;/li&gt;
&lt;li&gt;lastNode：最后一个子节点&lt;/li&gt;
&lt;li&gt;hasChildNodes方法：可以用来判断是否包含子节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;元素属性型api&#34;&gt;元素属性型api&lt;/h1&gt;
&lt;h2 id=&#34;setattribute&#34;&gt;setAttribute&lt;/h2&gt;
&lt;p&gt;setAttribute：根据名称和值修改元素的特性，用法如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element.setAttribute(name, value);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。
如果元素本身包含指定的特性名为属性，则可以世界访问属性进行赋值，比如下面两条代码是等价的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element.setAttribute(&amp;quot;id&amp;quot;,&amp;quot;test&amp;quot;);

element.id = &amp;quot;test&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;getattribute&#34;&gt;getAttribute&lt;/h2&gt;
&lt;p&gt;getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var value = element.getAttribute(&amp;quot;id&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;元素样式型api&#34;&gt;元素样式型api&lt;/h1&gt;
&lt;h2 id=&#34;windowgetcomputedstyle&#34;&gt;window.getComputedStyle&lt;/h2&gt;
&lt;p&gt;window.getComputedStyle是用来获取应用到元素后的样式，假设某个元素并未设置高度而是通过其内容将其高度撑开，这时候要获取它的高度就要用到getComputedStyle，用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var style = window.getComputedStyle(element[, pseudoElt]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;element是要获取的元素，pseudoElt指定一个伪元素进行匹配。
返回的style是一个CSSStyleDeclaration对象。
通过style可以访问到元素计算后的样式&lt;/p&gt;
&lt;h2 id=&#34;getboundingclientrect&#34;&gt;getBoundingClientRect&lt;/h2&gt;
&lt;p&gt;getBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var clientRect = element.getBoundingClientRect();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。除了IE9以下浏览器，还包含元素的height和width等数据，具体可查看链接。&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;阮一峰：&lt;a href=&#34;https://wangdoc.com/javascript/dom/index.html&#34;&gt;JavaScript教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;狼狼的蓝胖子：&lt;a href=&#34;http://luopq.com/2015/11/30/javascript-dom/&#34;&gt;Javascript操作DOM常用API总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>原型与原型链</title>
                <link>https://example.com/posts/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
                <guid isPermaLink="true">https://example.com/posts/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
                <pubDate>Sat, 06 Apr 2019 19:12:56 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;&lt;strong&gt;再讲原型与原型链的前提下先讲些概念方便理解&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;对象是什么&#34;&gt;对象是什么&lt;/h1&gt;
&lt;p&gt;面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。&lt;/p&gt;
&lt;p&gt;每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。对象可以复用，通过继承机制还可以定制。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。&lt;/p&gt;
&lt;p&gt;那么，“对象”（object）到底是什么？我们从两个层次来理解。&lt;/p&gt;
&lt;p&gt;（1）对象是单个实物的抽象。&lt;/p&gt;
&lt;p&gt;一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。&lt;/p&gt;
&lt;p&gt;（2）对象是一个容器，封装了属性（property）和方法（method）。&lt;/p&gt;
&lt;p&gt;属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。&lt;/p&gt;
&lt;h1 id=&#34;构造函数&#34;&gt;构造函数&lt;/h1&gt;
&lt;p&gt;面向对象编程的第一步，就是要生成对象。前面说过，对象是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。&lt;/p&gt;
&lt;p&gt;典型的面向对象编程语言（比如 C++ 和 Java），都有“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。但是，JavaScript 语言的对象体系，不是基于“类”的，而是基于构造函数（constructor）和原型链（prototype）。&lt;/p&gt;
&lt;p&gt;JavaScript 语言使用构造函数（constructor）作为对象的模板。所谓”构造函数”，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构。&lt;/p&gt;
&lt;p&gt;构造函数就是一个普通的函数，但是有自己的特征和用法。&lt;/p&gt;
&lt;p&gt;var Vehicle = function () {
this.price = 1000;
};
上面代码中，Vehicle就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写。&lt;/p&gt;
&lt;p&gt;构造函数的特点有两个。&lt;/p&gt;
&lt;p&gt;函数体内部使用了this关键字，代表了所要生成的对象实例。
生成对象的时候，必须使用new命令。
下面先介绍new命令。&lt;/p&gt;
&lt;h2 id=&#34;new-命令&#34;&gt;new 命令&lt;/h2&gt;
&lt;h3 id=&#34;基本用法&#34;&gt;基本用法&lt;/h3&gt;
&lt;p&gt;new命令的作用，就是执行构造函数，返回一个实例对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Vehicle = function () {
  this.price = 1000;
};

var v = new Vehicle();
v.price // 1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码通过new命令，让构造函数Vehicle生成一个实例对象，保存在变量v中。这个新生成的实例对象，从构造函数Vehicle得到了price属性。new命令执行时，构造函数内部的this，就代表了新生成的实例对象，this.price表示实例对象有一个price属性，值是1000。&lt;/p&gt;
&lt;p&gt;使用new命令时，根据需要，构造函数也可以接受参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Vehicle = function (p) {
  this.price = p;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;var v = new Vehicle(500);
new命令本身就可以执行构造函数，所以后面的构造函数可以带括号，也可以不带括号。下面两行代码是等价的，但是为了表示这里是函数调用，推荐使用括号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 推荐的写法
var v = new Vehicle();
// 不推荐的写法
var v = new Vehicle;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个很自然的问题是，如果忘了使用new命令，直接调用构造函数会发生什么事？&lt;/p&gt;
&lt;p&gt;这种情况下，构造函数就变成了普通函数，并不会生成实例对象。而且由于后面会说到的原因，this这时代表全局对象，将造成一些意想不到的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Vehicle = function (){
  this.price = 1000;
};

var v = Vehicle();
v // undefined
price // 1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，调用Vehicle构造函数时，忘了加上new命令。结果，变量v变成了undefined，而price属性变成了全局变量。因此，应该非常小心，避免不使用new命令、直接调用构造函数。&lt;/p&gt;
&lt;p&gt;为了保证构造函数必须与new命令一起使用，一个解决办法是，构造函数内部使用严格模式，即第一行加上use strict。这样的话，一旦忘了使用new命令，直接调用构造函数就会报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Fubar(foo, bar){
  &#39;use strict&#39;;
  this._foo = foo;
  this._bar = bar;
}

Fubar()
// TypeError: Cannot set property &#39;_foo&#39; of undefined
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码的Fubar为构造函数，use strict命令保证了该函数在严格模式下运行。由于严格模式中，函数内部的this不能指向全局对象，默认等于undefined，导致不加new调用会报错（JavaScript 不允许对undefined添加属性）。&lt;/p&gt;
&lt;p&gt;另一个解决办法，构造函数内部判断是否使用new命令，如果发现没有使用，则直接返回一个实例对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Fubar(foo, bar) {
  if (!(this instanceof Fubar)) {
    return new Fubar(foo, bar);
  }

  this._foo = foo;
  this._bar = bar;
}

Fubar(1, 2)._foo // 1
(new Fubar(1, 2))._foo // 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中的构造函数，不管加不加new命令，都会得到同样的结果。&lt;/p&gt;
&lt;h3 id=&#34;new-命令的原理&#34;&gt;new 命令的原理&lt;/h3&gt;
&lt;p&gt;使用new命令时，它后面的函数依次执行下面的步骤。&lt;/p&gt;
&lt;p&gt;创建一个空对象，作为将要返回的对象实例。
将这个空对象的原型，指向构造函数的prototype属性。
将这个空对象赋值给函数内部的this关键字。
开始执行构造函数内部的代码。
也就是说，构造函数内部，this指的是一个新生成的空对象，所有针对this的操作，都会发生在这个空对象上。构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作一个空对象（即this对象），将其“构造”为需要的样子。&lt;/p&gt;
&lt;p&gt;如果构造函数内部有return语句，而且return后面跟着一个对象，new命令会返回return语句指定的对象；否则，就会不管return语句，返回this对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Vehicle = function () {
  this.price = 1000;
  return 1000;
};

(new Vehicle()) === 1000
// false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，构造函数Vehicle的return语句返回一个数值。这时，new命令就会忽略这个return语句，返回“构造”后的this对象。&lt;/p&gt;
&lt;p&gt;但是，如果return语句返回的是一个跟this无关的新对象，new命令会返回这个新对象，而不是this对象。这一点需要特别引起注意。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Vehicle = function (){
  this.price = 1000;
  return { price: 2000 };
};

(new Vehicle()).price
// 2000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，构造函数Vehicle的return语句，返回的是一个新对象。new命令会返回这个对象，而不是this对象。&lt;/p&gt;
&lt;p&gt;另一方面，如果对普通函数（内部没有this关键字的函数）使用new命令，则会返回一个空对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getMessage() {
  return &#39;this is a message&#39;;
}

var msg = new getMessage();

msg // {}
typeof msg // &amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，getMessage是一个普通函数，返回一个字符串。对它使用new命令，会得到一个空对象。这是因为new命令总是返回一个对象，要么是实例对象，要么是return语句指定的对象。本例中，return语句返回的是字符串，所以new命令就忽略了该语句。&lt;/p&gt;
&lt;p&gt;new命令简化的内部流程，可以用下面的代码表示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function _new(/* 构造函数 */ constructor, /* 构造函数参数 */ params) {
  // 将 arguments 对象转为数组
  var args = [].slice.call(arguments);
  // 取出构造函数
  var constructor = args.shift();
  // 创建一个空对象，继承构造函数的 prototype 属性
  var context = Object.create(constructor.prototype);
  // 执行构造函数
  var result = constructor.apply(context, args);
  // 如果返回结果是对象，就直接返回，否则返回 context 对象
  return (typeof result === &#39;object&#39; &amp;amp;&amp;amp; result != null) ? result : context;
}

// 实例
var actor = _new(Person, &#39;张三&#39;, 28);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;原型对象概述&#34;&gt;原型对象概述&lt;/h1&gt;
&lt;h2 id=&#34;构造函数的缺点&#34;&gt;构造函数的缺点&lt;/h2&gt;
&lt;p&gt;JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Cat (name, color) {
  this.name = name;
  this.color = color;
}

var cat1 = new Cat(&#39;大毛&#39;, &#39;白色&#39;);

cat1.name // &#39;大毛&#39;
cat1.color // &#39;白色&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，Cat函数是一个构造函数，函数内部定义了name属性和color属性，所有实例对象（上例是cat1）都会生成这两个属性，即这两个属性会定义在实例对象上面。&lt;/p&gt;
&lt;p&gt;通过构造函数为实例对象定义属性，虽然很方便，但是有一个缺点。同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Cat(name, color) {
  this.name = name;
  this.color = color;
  this.meow = function () {
    console.log(&#39;喵喵&#39;);
  };
}

var cat1 = new Cat(&#39;大毛&#39;, &#39;白色&#39;);
var cat2 = new Cat(&#39;二毛&#39;, &#39;黑色&#39;);

cat1.meow === cat2.meow
// false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，cat1和cat2是同一个构造函数的两个实例，它们都具有meow方法。由于meow方法是生成在每个实例对象上面，所以两个实例就生成了两次。也就是说，每新建一个实例，就会新建一个meow方法。这既没有必要，又浪费系统资源，因为所有meow方法都是同样的行为，完全应该共享。&lt;/p&gt;
&lt;p&gt;这个问题的解决方法，就是 JavaScript 的原型对象（prototype）。&lt;/p&gt;
&lt;h2 id=&#34;prototype-属性的作用&#34;&gt;prototype 属性的作用&lt;/h2&gt;
&lt;p&gt;JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享。也就是说，如果属性和方法定义在原型上，那么所有实例对象就能共享，不仅节省了内存，还体现了实例对象之间的联系。&lt;/p&gt;
&lt;p&gt;下面，先看怎么为对象指定原型。JavaScript 规定，每个函数都有一个prototype属性，指向一个对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f() {}
typeof f.prototype // &amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，函数f默认具有prototype属性，指向一个对象。&lt;/p&gt;
&lt;p&gt;对于普通函数来说，该属性基本无用。但是，对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Animal(name) {
  this.name = name;
}
Animal.prototype.color = &#39;white&#39;;

var cat1 = new Animal(&#39;大毛&#39;);
var cat2 = new Animal(&#39;二毛&#39;);

cat1.color // &#39;white&#39;
cat2.color // &#39;white&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，构造函数Animal的prototype属性，就是实例对象cat1和cat2的原型对象。原型对象上添加一个color属性，结果，实例对象都共享了该属性。&lt;/p&gt;
&lt;p&gt;原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在所有实例对象上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Animal.prototype.color = &#39;yellow&#39;;

cat1.color // &amp;quot;yellow&amp;quot;
cat2.color // &amp;quot;yellow&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，原型对象的color属性的值变为yellow，两个实例对象的color属性立刻跟着变了。这是因为实例对象其实没有color属性，都是读取原型对象的color属性。也就是说，当实例对象本身没有某个属性或方法的时候，它会到原型对象去寻找该属性或方法。这就是原型对象的特殊之处。&lt;/p&gt;
&lt;p&gt;如果实例对象自身就有某个属性或方法，它就不会再去原型对象寻找这个属性或方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat1.color = &#39;black&#39;;

cat1.color // &#39;black&#39;
cat2.color // &#39;yellow&#39;
Animal.prototype.color // &#39;yellow&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，实例对象cat1的color属性改为black，就使得它不再去原型对象读取color属性，后者的值依然为yellow。&lt;/p&gt;
&lt;p&gt;总结一下，原型对象的作用，就是定义所有实例对象共享的属性和方法。这也是它被称为原型对象的原因，而实例对象可以视作从原型对象衍生出来的子对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Animal.prototype.walk = function () {
  console.log(this.name + &#39; is walking&#39;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，Animal.prototype对象上面定义了一个walk方法，这个方法将可以在所有Animal实例对象上面调用。&lt;/p&gt;
&lt;h1 id=&#34;原型链&#34;&gt;原型链&lt;/h1&gt;
&lt;p&gt;JavaScript 规定，所有对象都有自己的原型对象（prototype）。一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型。因此，就会形成一个“原型链”（prototype chain）：对象到原型，再到原型的原型……&lt;/p&gt;
&lt;p&gt;如果一层层地上溯，所有对象的原型最终都可以上溯到Object.prototype，即Object构造函数的prototype属性。也就是说，所有对象都继承了Object.prototype的属性。这就是所有对象都有valueOf和toString方法的原因，因为这是从Object.prototype继承的。&lt;/p&gt;
&lt;p&gt;那么，Object.prototype对象有没有它的原型呢？回答是Object.prototype的原型是null。null没有任何属性和方法，也没有自己的原型。因此，原型链的尽头就是null。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.getPrototypeOf(Object.prototype)
// null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码表示，Object.prototype对象的原型是null，由于null没有任何属性，所以原型链到此为止。Object.getPrototypeOf方法返回参数对象的原型，具体介绍请看后文。&lt;/p&gt;
&lt;p&gt;读取对象的某个属性时，JavaScript 引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。如果直到最顶层的Object.prototype还是找不到，则返回undefined。如果对象自身和它的原型，都定义了一个同名属性，那么优先读取对象自身的属性，这叫做“覆盖”（overriding）。&lt;/p&gt;
&lt;p&gt;注意，一级级向上，在整个原型链上寻找某个属性，对性能是有影响的。所寻找的属性在越上层的原型对象，对性能的影响越大。如果寻找某个不存在的属性，将会遍历整个原型链。&lt;/p&gt;
&lt;p&gt;举例来说，如果让构造函数的prototype属性指向一个数组，就意味着实例对象可以调用数组方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var MyArray = function () {};

MyArray.prototype = new Array();
MyArray.prototype.constructor = MyArray;

var mine = new MyArray();
mine.push(1, 2, 3);
mine.length // 3
mine instanceof Array // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，mine是构造函数MyArray的实例对象，由于MyArray.prototype指向一个数组实例，使得mine可以调用数组方法（这些方法定义在数组实例的prototype对象上面）。最后那行instanceof表达式，用来比较一个对象是否为某个构造函数的实例，结果就是证明mine为Array的实例&lt;/p&gt;
&lt;h1 id=&#34;objectprototype__proto__&#34;&gt;Object.prototype.&lt;strong&gt;proto&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;实例对象的__proto__属性（前后各两个下划线），返回该对象的原型。该属性可读写。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = {};
var p = {};

obj.__proto__ = p;
Object.getPrototypeOf(obj) === p // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码通过__proto__属性，将p对象设为obj对象的原型。&lt;/p&gt;
&lt;p&gt;根据语言标准，__proto__属性只有浏览器才需要部署，其他环境可以没有这个属性。它前后的两根下划线，表明它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用Object.getPrototypeof()和Object.setPrototypeOf()，进行原型对象的读写操作。&lt;/p&gt;
&lt;p&gt;原型链可以用__proto__很直观地表示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var A = {
  name: &#39;张三&#39;
};
var B = {
  name: &#39;李四&#39;
};

var proto = {
  print: function () {
    console.log(this.name);
  }
};

A.__proto__ = proto;
B.__proto__ = proto;

A.print() // 张三
B.print() // 李四

A.print === B.print // true
A.print === proto.print // true
B.print === proto.print // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，A对象和B对象的原型都是proto对象，它们都共享proto对象的print方法。也就是说，A和B的print方法，都是在调用proto对象的print方法。&lt;/p&gt;
&lt;h1 id=&#34;获取原型对象方法的比较&#34;&gt;获取原型对象方法的比较&lt;/h1&gt;
&lt;p&gt;如前所述，__proto__属性指向当前对象的原型对象，即构造函数的prototype属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = new Object();

obj.__proto__ === Object.prototype
// true
obj.__proto__ === obj.constructor.prototype
// true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码首先新建了一个对象obj，它的__proto__属性，指向构造函数（Object或obj.constructor）的prototype属性。&lt;/p&gt;
&lt;p&gt;因此，获取实例对象obj的原型对象，有三种方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;obj.&lt;strong&gt;proto&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;obj.constructor.prototype&lt;/li&gt;
&lt;li&gt;Object.getPrototypeOf(obj)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面三种方法之中，前两种都不是很可靠。__proto__属性只有浏览器才需要部署，其他环境可以不部署。而obj.constructor.prototype在手动改变原型对象时，可能会失效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var P = function () {};
var p = new P();

var C = function () {};
C.prototype = p;
var c = new C();

c.constructor.prototype === p // false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，构造函数C的原型对象被改成了p，但是实例对象的c.constructor.prototype却没有指向p。所以，在改变原型对象时，一般要同时设置constructor属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C.prototype = p;
C.prototype.constructor = C;

var c = new C();
c.constructor.prototype === p // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，推荐使用第三种Object.getPrototypeOf方法，获取原型对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考链接：阮一峰-&lt;a href=&#34;https://wangdoc.com/javascript/&#34;&gt;JavaScript教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>JS里的数据类型转换</title>
                <link>https://example.com/posts/js%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
                <guid isPermaLink="true">https://example.com/posts/js%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
                <pubDate>Thu, 04 Apr 2019 19:52:50 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;类型转换&#34;&gt;类型转换&lt;/h1&gt;
&lt;p&gt;本文分别讲下数据类型之间的相互转换&lt;/p&gt;
&lt;h2 id=&#34;转换为string&#34;&gt;转换为string&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;数据类型.toString
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;toString&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;toString&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;symbol&lt;/td&gt;
&lt;td&gt;不研究&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;报错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;报错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;toString&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;数据类型 + &#39;&#39;
&#39;&#39; + 数据类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5b94a9b8fa.png&#34; alt=&#34;clipboard.png&#34;&gt;
3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.String(/*数据类型*/)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5b9c09eeda.png&#34; alt=&#34;clipboard.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;转换为boolean&#34;&gt;转换为boolean&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Boolean(/*数据类型*/)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5b9c09eeda.png&#34; alt=&#34;clipboard.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为!表示取反
!!表示负负得正&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!/*数据类型*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5bb19da865.png&#34; alt=&#34;clipboard.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5个falsy值&#34;&gt;5个falsy值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数字里只有0 NaN false&lt;/li&gt;
&lt;li&gt;string中只有空字符串&#39;&#39;是false&lt;/li&gt;
&lt;li&gt;null 和undefined 只有一个值，就是false&lt;/li&gt;
&lt;li&gt;obiect 都是true,object包括数组和函数所以他们俩也是true
&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5bbea358f1.png&#34; alt=&#34;clipboard.png&#34;&gt;
&lt;strong&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy&#34;&gt;falsy参考链接&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;转换为number&#34;&gt;转换为number&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&#39;1&#39;--&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Number(&#39;1&#39;)===1
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;parseInt(&#39;1&#39;,10)===1//10表示十进制
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5c241a55ee.png&#34; alt=&#34;clipboard.png&#34;&gt;
3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parseFloat(&#39;1.23&#39;)===1.23
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&#39;1&#39;-0===1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5c0d2e34ae.png&#34; alt=&#34;clipboard.png&#34;&gt;
5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  +&#39;1&#39;===1
  +&#39;-1&#39;===-1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/04/5ca5c1e8c6501.png&#34; alt=&#34;clipboard.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;转为null和undefined都只有一个值&#34;&gt;转为null和undefined都只有一个值&lt;/h2&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>JS里的数据类型</title>
                <link>https://example.com/posts/js%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
                <guid isPermaLink="true">https://example.com/posts/js%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
                <pubDate>Wed, 03 Apr 2019 18:42:20 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;js里的7种数据类型&#34;&gt;JS里的7种数据类型&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 新增的第七种 Symbol 类型的值，不描述。）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数值（number）：整数和小数（比如1和3.14）&lt;/li&gt;
&lt;li&gt;字符串（string）：文本（比如Hello World）。&lt;/li&gt;
&lt;li&gt;布尔值（boolean）：表示真伪的两个特殊值，即true（真）和false（假）&lt;/li&gt;
&lt;li&gt;undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值&lt;/li&gt;
&lt;li&gt;null：表示空值，即此处的值为空。&lt;/li&gt;
&lt;li&gt;对象（object）：各种值组成的集合。&lt;/li&gt;
&lt;li&gt;Symbol（符号）：https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;string 表示可以用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39; &#39;//空字符串
&amp;quot; &amp;quot;//空字符串
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;转义符号为\&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = &amp;quot;&#39;&amp;quot;//单引号
var a = &#39;&amp;quot;&#39;//双引号
var a = &#39;\&#39;&#39;//单引号
var n = &#39;\n&#39;//回车
var t = &#39;\t&#39;//Tab(制表符)
var b = &#39;\\&#39;//表示\符号
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;多行字符串表示&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//不是字符串里有回车
var s = &#39;12345\
         67890&#39;//坑人语法不使用
var s2 = &#39;12345&#39;       
         &#39;67890&#39; //易报错5之后有看不见的空格
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;以上两种不建议使用&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var s3 = &#39;12345&#39;+
         &#39;67890&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;==建议使用这个语法==&lt;/p&gt;
&lt;p&gt;在ES6中有个新的语法特性为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var s4 = &#39;12345  //此处5后面有个回车
67890&#39;//实际为11个字符包含一个回车
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;关于null和undefined&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量没有值-undefined(语法)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个对象objest，现在不想赋值-null&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个非对象，不想赋值-undefined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;对象也是哈希表&lt;/strong&gt;
关于命名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;person[&#39;name&#39;]
person[name]
person.name
//下面两种符合标识符命名规则的情况下3种相等
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;typeof-运算符&#34;&gt;typeof 运算符&lt;/h1&gt;
&lt;p&gt;JavaScript 有三种方法，可以确定一个值到底是什么类型。&lt;/p&gt;
&lt;p&gt;typeof运算符
instanceof运算符
Object.prototype.toString方法
instanceof运算符和Object.prototype.toString方法。这里介绍typeof运算符。&lt;/p&gt;
&lt;p&gt;typeof运算符可以返回一个值的数据类型。&lt;/p&gt;
&lt;p&gt;数值、字符串、布尔值分别返回number、string、boolean。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typeof 123 // &amp;quot;number&amp;quot;
typeof &#39;123&#39; // &amp;quot;string&amp;quot;
typeof false // &amp;quot;boolean&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数返回function。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f() {}
typeof f
// &amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;undefined返回undefined。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typeof undefined
// &amp;quot;undefined&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用这一点，typeof可以用来检查一个没有声明的变量，而不报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v
// ReferenceError: v is not defined

typeof v
// &amp;quot;undefined&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，变量v没有用var命令声明，直接使用就会报错。但是，放在typeof后面，就不报错了，而是返回undefined。&lt;/p&gt;
&lt;p&gt;实际编程中，这个特点通常用在判断语句。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 错误的写法
if (v) {
  // ...
}
// ReferenceError: v is not defined

// 正确的写法
if (typeof v === &amp;quot;undefined&amp;quot;) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象返回object。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typeof window // &amp;quot;object&amp;quot;
typeof {} // &amp;quot;object&amp;quot;
typeof [] // &amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码中，空数组（[]）的类型也是object，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，instanceof运算符可以区分数组和对象。instanceof运算符的详细解释，请见《面向对象编程》一章。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var o = {};
var a = [];

o instanceof Array // false
a instanceof Array // true
null返回object。
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;typeof null // &amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;null的类型是object，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考链接&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阮一峰，&lt;a href=&#34;https://wangdoc.com/javascript/types/general.html&#34;&gt;JavaScript教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>CSS布局</title>
                <link>https://example.com/posts/css%E5%B8%83%E5%B1%80/</link>
                <guid isPermaLink="true">https://example.com/posts/css%E5%B8%83%E5%B1%80/</guid>
                <pubDate>Wed, 20 Mar 2019 20:53:01 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;css布局&#34;&gt;CSS布局&lt;/h2&gt;
&lt;h2 id=&#34;float-布局&#34;&gt;float 布局&lt;/h2&gt;
&lt;p&gt;float 布局应该是目前各大网站用的最多的一种布局方式了，但是也特别复杂，这里详细讲一下&lt;/p&gt;
&lt;p&gt;首先，什么是浮动？&lt;/p&gt;
&lt;p&gt;浮动元素是脱离文档流的，但不脱离文本流，这是什么意思呢，用过 word 的应该知道有一种图片环绕的方式是文字环绕吧，就是这种效果。&lt;/p&gt;
&lt;p&gt;那么它有什么特点呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对自身的影响
&lt;ul&gt;
&lt;li&gt;float 元素可以形成块，如 span元素。可以让行内元素也拥有宽和高，因为块级元素具有宽高&lt;/li&gt;
&lt;li&gt;浮动元素的位置尽量靠上&lt;/li&gt;
&lt;li&gt;尽量靠左（float:left）或右（float:right），如果那一行满足不了浮动元素的宽度要求，则元素会往下掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对兄弟元素的影响
&lt;ul&gt;
&lt;li&gt;不影响其他块级元素的位置&lt;/li&gt;
&lt;li&gt;影响其他块级元素的文本&lt;/li&gt;
&lt;li&gt;上面贴非 float 元素&lt;/li&gt;
&lt;li&gt;旁边贴 float 元素或者边框&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对父级元素的影响
&lt;ul&gt;
&lt;li&gt;从布局上 “消失”&lt;/li&gt;
&lt;li&gt;高度塌陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果有以下html结构，设置&lt;strong&gt;左右两栏布&lt;/strong&gt;局&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;leftChild&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;rightChild&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设置浮动&lt;/strong&gt;：左右布局常用的方法就是为子元素设置浮动，然后在其&lt;strong&gt;父元素上使用clearfix类&lt;/strong&gt;清除浮动。示例代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.clearfix::after{
  content:&amp;quot;&amp;quot;;
  display:block;
  clear:both;
}
.leftChild,
.rightChild{
  float:left;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-&lt;strong&gt;设置position&lt;/strong&gt;绝对定位，为父元素设置position:relative; 为子元素设置position:absolute 。示例代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.parent{
  position:relative;
}
.leftChild{
  position:absolute;
  left:0;
  top:0;
}
.rightChild{
  position:absolute;
  left:200px;
  top:0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;三栏布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;左中右布局主要方法也是浮动或者绝对定位，不过可以分情况选择其一使用甚至结合使用。&lt;/p&gt;
&lt;p&gt;三栏布局，思路主要是左边一个浮动元素，右边一个浮动元素。这里有个小问题，中间的元素要写在最后，因为中间元素假设有块级元素的话，会影响右边浮动元素的定位，这里演示一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;CSS 布局&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;style&amp;gt;
*{
    margin: 0;
    padding: 0;
}
.container{
    width: 400px;
    height: 200px;
}

.left{
    background-color: yellow; 
    float: left;
    height: 100%;
    width:100px;
}
.right{
    background-color: green; 
    float: right;
    height: 100%;
    width:100px;
}
.middle{
    background-color: red; 
    margin-left: 100px;
    margin-right: 100px;
    height:100%;
}
.container::after{
    content: &#39;&#39;;
    display: block;
    visibility: hidden;
    clear: both
}

&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=container&amp;gt;       
        &amp;lt;div class=left&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;middle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=right&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为浮动元素会把块级元素的位置空出来，所以这里右边的浮动元素把上面的位置空了下来，所以正确的写法应该是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=container&amp;gt;       
        &amp;lt;div class=left&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=right&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;middle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;特定情况下使用浮动还是绝对定位&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用浮动时：不需要计算特别精确的位置，不过不易操控，浮动元素的宽度需要注意，否则会换行展示，适用于导航栏等地方。&lt;/li&gt;
&lt;li&gt;使用绝对定位：需要计算元素的具体位置，不过更加准确，易于操控。&lt;/li&gt;
&lt;li&gt;当某些元素的位置要根据父元素的大小自适应，内容宽度无法确定时，建议使用浮动&lt;/li&gt;
&lt;li&gt;当特定元素的位置是相对父元素固定，或者内容宽高确定，需要精确定位甚至以后要用js操作变换位置时，建议使用浮动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于居中&#34;&gt;关于居中&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;水平居中&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字的水平居中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将一段文字置于容器的水平中点，只要设置text-align属性即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　text-align:center;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;容器的水平居中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先为该容器设置一个明确宽度，然后将margin的水平值设为auto即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　div#container {
　　　　width:760px;
　　　　margin:0 auto;
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;垂直居中&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字的垂直居中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单行文字的垂直居中，只要将行高与容器高设为相等即可。&lt;/p&gt;
&lt;p&gt;比如，容器中有一行数字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;1234567890&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后CSS这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  div#container {height: 35px; line-height: 35px;}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;容器的垂直居中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，有一大一小两个容器，请问如何将小容器垂直居中？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　&amp;lt;div id=&amp;quot;big&amp;quot;&amp;gt;
　　　　&amp;lt;div id=&amp;quot;small&amp;quot;&amp;gt;
　　　　&amp;lt;/div&amp;gt;
　　&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先，将大容器的定位为relative。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　div#big{
　　　　position:relative;
　　　　height:480px;
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，将小容器定位为absolute，再将它的左上角沿y轴下移50%，最后将它margin-top上移本身高度的50%即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　div#small {
　　　　position: absolute;
　　　　top: 50%;
　　　　height: 240px;
　　　　margin-top: -120px;
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用同样的思路，也可以做出水平居中的效果。&lt;/p&gt;
&lt;h3 id=&#34;关于css布局的小技巧&#34;&gt;关于CSS布局的小技巧&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;图片宽度的自适应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何使得较大的图片，能够自动适应小容器的宽度？CSS可以这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    img {max-width: 100%}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;CSS的优先性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果同一个容器被多条CSS语句定义，那么哪一个定义优先呢？&lt;/p&gt;
&lt;p&gt;基本规则是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行内样式 &amp;gt; id样式 &amp;gt; class样式 &amp;gt; 标签名样式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，有一个元素：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div id=&amp;quot;ID&amp;quot; class=&amp;quot;CLASS&amp;quot; style=&amp;quot;color:black;&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;行内样式是最优先的，然后其他设置的优先性，从低到高依次为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  div &amp;lt; .class &amp;lt; div.class &amp;lt; #id &amp;lt; div#id &amp;lt; #id.class &amp;lt; div#id.class
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;用图片充当列表标志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，浏览器使用一个黑圆圈作为列表标志，可以用图片取代它：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　ul {list-style: none}

　　ul li { 
　　　　background-image: url(&amp;quot;path-to-your-image&amp;quot;); 
　　　　background-repeat: none; 
　　　　background-position: 0 0.5em; 
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;透明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将一个容器设为透明，可以使用下面的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　.element { 
　　　　filter:alpha(opacity=50); 
　　　　-moz-opacity:0.5; 
　　　　-khtml-opacity: 0.5; 
　　　　opacity: 0.5; 
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;CSS三角形&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何使用CSS生成一个三角形？&lt;/p&gt;
&lt;p&gt;先编写一个空元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;triangle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，将它四个边框中的三个边框设为透明，剩下一个设为可见，就可以生成三角形效果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　.triangle { 
　　　　border-color: transparent transparent green transparent; 
　　　　border-style: solid; 
　　　　border-width: 0px 300px 300px 300px; 
　　　　height: 0px; 
　　　　width: 0px; 
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他图形可以用同样的道理画出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS提示框&lt;/strong&gt;
当鼠标移动到链接上方，会自动出现一个提示框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a class=&amp;quot;tooltip&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;链接文字 &amp;lt;span&amp;gt;提示文字&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CSS这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　a.tooltip {position: relative} 
　　a.tooltip span {display:none; padding:5px; width:200px;} 
　　a:hover {background:#fff;} /*background-color is a must for IE6*/ 
　　a.tooltip:hover span{display:inline; position:absolute;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;固定位置的页首&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当页面滚动时，有时需要页首在位置固定不变，CSS语句可以这样写，效果参见http://limpid.nl/lab/css/fixed/header：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　　body{ margin:0;padding:100px 0 0 0;}

　　div#header{
　　　　position:absolute;
　　　　top:0;
　　　　left:0;
　　　　width:100%;
　　　　height:&amp;lt;length&amp;gt;;
　　}

　　@media screen{
　　　　body&amp;gt;div#header{position: fixed;}
　　}

　　* html body{overflow:hidden;}

　　* html div#content{height:100%;overflow:auto;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;容器的水平和垂直居中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-　　&#34; data-lang=&#34;　　&#34;&gt;  &amp;lt;figure class=&#39;logo&#39;&amp;gt;

　&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;

　&amp;lt;img class=&#39;photo&#39;/&amp;gt;

  &amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CSS代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.logo {
　　　　display: block;
　　　　text-align: center;
　　　　display: block;
　　　　text-align: center;
　　　　vertical-align: middle;
　　　　border: 4px solid #dddddd;
　　　　padding: 4px;
　　　　height: 74px;
　　　　width: 74px; }

　　.logo * {
　　　　display: inline-block;
　　　　height: 100%;
　　　　vertical-align: middle; }

　　.logo .photo {
　　　　height: auto;
　　　　width: auto;
　　　　max-width: 100%;
　　　　max-height: 100%; }
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本博客相关内容出处来自阮一峰的博客&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>如何用CSS画一个太极</title>
                <link>https://example.com/posts/%E5%A6%82%E4%BD%95%E7%94%A8css%E7%94%BB%E4%B8%80%E4%B8%AA%E5%A4%AA%E6%9E%81/</link>
                <guid isPermaLink="true">https://example.com/posts/%E5%A6%82%E4%BD%95%E7%94%A8css%E7%94%BB%E4%B8%80%E4%B8%AA%E5%A4%AA%E6%9E%81/</guid>
                <pubDate>Tue, 19 Mar 2019 20:58:12 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本文将介绍如何用CSS画一个太极图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://css-tricks.com/wp-content/uploads/2017/06/sym_yin_yang_static.svg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先 画一个方块黑白各一半&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
  background-color: lightslategray;
}
.yy {
  width: 0px;
  height: 600px;
  border-left: 300px solid black;
  border-right: 300px solid white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如图
&lt;img src=&#34;https://github.com/QIMengz/yinyang-demo/blob/master/img/1.jpg?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;再画白色部分的园（先画方块）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.yy::before {
  content: &#39;&#39;;
  display: block;
  width: 100px;
  height: 100px;
  border: 100px solid black ;
  border-image-repeat: 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如图
&lt;img src=&#34;https://github.com/QIMengz/yinyang-demo/blob/master/img/2.jpg?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;再设置它的半径为100%&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  border-image-repeat: 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;图3
&lt;img src=&#34;https://github.com/QIMengz/yinyang-demo/blob/master/img/3.jpg?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;再让圆居中对齐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  background-color: white;
  margin-left: -150px;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;图4&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/QIMengz/yinyang-demo/blob/master/img/4%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.jpg?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来在白色下面画一个宽高100px的方块，在上面加一个100px白色的外框，和上面一样让它的半径100%再加上黑色的背景色，一个小黑球就完成了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.yy::after {
  content: &#39;&#39;;
  display: block;
  width: 100px;
  height: 100px;
  border: 100px solid white;
  border-radius: 100%;
  background-color: black;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;图5&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/QIMengz/yinyang-demo/blob/master/img/5%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.jpg?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后同理让整个图的半径100%就变成圆了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
  background-color: lightslategray;
}
.yy {
  width: 0px;
  height: 600px;
  border-left: 300px solid black;
  border-right: 300px solid white;
  border-radius: 100%;
  margin-top: 60px;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: auto;
}
.yy::before {
  content: &#39;&#39;;
  display: block;
  width: 100px;
  height: 100px;
  border: 100px solid black ;
  border-radius: 100%;
  background-color: white;
  margin-left: -150px;
}
.yy::after {
  content: &#39;&#39;;
  display: block;
  width: 100px;
  height: 100px;
  border: 100px solid white;
  border-radius: 100%;
  background-color: black;
  margin-left: -150px;
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>HTML常用标签</title>
                <link>https://example.com/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
                <guid isPermaLink="true">https://example.com/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
                <pubDate>Sun, 17 Mar 2019 15:59:25 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;1html5头部结构&#34;&gt;1.HTML5头部结构&lt;/h1&gt;
&lt;p&gt;【DOCTYPE html】
声明文档类型为HTML5文件。
文档声明在HTML5文档必不可少，且必须放在文档的第一行。&lt;/p&gt;
&lt;p&gt;【meta标签】
1-charset属性：单独使用，设置文档字符及编码格式。
写法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;常见的中文编码格式：
B-2312:国标码，简体中文
GBK：扩展的国标编码，简体中文
UTF-8:万国码 Unicode码，基本兼容各国语言
2-http-equiv属性：需配合content属性使用。主要声明浏览器如何解释编译文件。
写法：```html&lt;/p&gt;
&lt;meta http-equiv=&#34;属性值&#34; content=&#34;属性值详细内容&#34;&gt;
```
常用属性值：Content-Type HTML4.01之前的文档内容编码声明。
refresh 网页刷新
set-Cookie 设置浏览器cookie缓存
3-name属性：需配合content属性使用，主要用于给搜索引擎提供必要信息。
写法：```html
&lt;meta name=&#34;属性值&#34; content=&#34;属性值详细内容&#34;&gt;
```
重要属性值：author 作者，声明网站作者，常用公司网址表示
keywords 网站关键字，多个关键字，用英文逗号分隔
description 网页描述，搜索引擎显示在title下的描述内容
☆☆http-equiv和name属性，必须与content属性配合使用，前两者只是用于
声明即将修改哪些属性值，而实际的属性值内容，在content中描述。
```html
&lt;!--charset属性--&gt;
&lt;meta charset=&#34;UTF-8&#34;&gt;
&lt;!--作者--&gt;
&lt;meta name=&#34;anthor&#34; contet=&#34;http://www.yt4561761.com&#34; /&gt;
&lt;!--网页关键字--&gt;
&lt;meta name=&#34;keywords&#34; content=&#34;HTML5,网页，第一个&#34;
&lt;!--网页描述--&gt;
&lt;meta name=&#34;description&#34; content=我的第一个网页 /&gt;
&lt;!--声明文档的编码格式--&gt;
&lt;meta charset=&#34;UTF-8&#34; /&gt;
```
&lt;p&gt;【link标签】
1-作用：用于为网页链接各种文件。
2-常用属性：
rel：用于表明被链接文件与当前文件关系。icon表明被链接图片是当前网页的icon图标。
type：表明被链接文件是什么类型，可省略。
href：表明链接文件的地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;icon&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;img/icon.png&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【title标签】
网页的标题，即网页选项卡上的文字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;111&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.常见的块级标签&lt;/p&gt;
&lt;p&gt;【常见的块级标签】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;标题标签&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
水平线&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
段落&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
换行&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
引用&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;blockquote&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;blockquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
预格式&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
引用标签```&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;blockquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;blockquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
表明标签中的文字，为引用的内容，浏览器显示为等宽字体，并缩进。
cite属性，表明引用的来源，一般为引用的网址URL
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;blockquote&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http：//www.yt4561761.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;dfdsfsdfd&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;blockquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 
预格式标签&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
浏览器解析时，会按照等宽字体显示，并保留标签内的空格和回车。
常用于保留代码格式。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;yt4561761yt4561761yt4561761&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【有序列表ol order list】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;一&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;二&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;三&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;四&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【无序列表ul unorder list】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【定义描述列表】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;标题&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;描述项&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一般情况下，标题dt只有一项。描述项dd可以有多项。
浏览器显示时，标题顶格显示，dd缩进显示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;这是dl列表的标题&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;描述项1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;描述项2&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;描述项3&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【图片组合标签figure】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;1-&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;标签有两个子标签：
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;:一幅图片，src表示图片的路径。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;：图片的标题
2-浏览器显示为：图片与标题上下排列，且整体向后缩进一个单位。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;img/icon.png&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;asd
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【分区标签div】
常配合CSS使用，为网页中最常用的分区标签，常用于网页布局使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width：100%; height：100px; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
这是div里面的文字
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;div里面的标题&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.常见的行级标签&lt;/p&gt;
&lt;p&gt;【常见的行级标签】
span 文本
img 图片
em 强调
strong 强调
q 短引用
a 超链接
i 倾斜
b 加粗
small 缩小字体
u 下划线&lt;/p&gt;
&lt;p&gt;span（文本）：用于包裹一部分文字，进行特定样式的修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;color:red; font-size:36px;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;酷&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;em（强调）：浏览器显示为倾斜。
strong（强调）：浏览器显示为加粗。&lt;/p&gt;
&lt;p&gt;【strong/em/i/b 标签的区别】
1-em和strong都表示强调，strong&amp;gt;em,strong和em标签均可多层嵌套，表示强调程度的递增。
2-em和i都能倾斜，Strong和b都能加粗。但是Strong和em多了一层强调的语义。可以帮助搜索 引擎快速抓取网站重点。且html5要求开发者尽可能实现代码的语义化。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;我真踏马帅！！&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;我真籍八帅！！&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;我被i标签弄斜了&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;我被b标签弄粗了&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【q(短引用)】常用于一句话的引用，cite属性表示引用来源，浏览器解析时，会在内容的前后插入双引号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;www.yt4561761.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;那你很棒哦&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;small（缩小字体）：small标签可多层嵌套，表示比默认字体小一号，直到小到最小号为止。&lt;/p&gt;
&lt;p&gt;big（放大字体）：亦可多层嵌套，直到最大。
但在最新规范中，small和big标签不提倡使用。提倡使用style=&amp;quot;font-size:11px;&amp;quot;CSS样式替代。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;那你很&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;棒&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;哦！&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【img 图片标签】
1-src属性：表示图片引用路径。
常见路径的写法：
①相对路径：
Ⅰ -当图片在当前文件下一层时：文件夹名/图片名 例如：img/abc.jpg
Ⅱ-当图片与当前文件在同一层时：图片名 例如：src=&amp;quot;abc.jpg&amp;quot;
Ⅲ-当图片在当前文件上一层时：../图片名 例如：src=&amp;quot;../abc.jpg&amp;quot;
使用相对路径时，图片最外层只能放到网站根目录（图片必须要在项目文件夹中）
②绝对路径：写法file：///E:/aaa.png 但是，严禁使用
③网络连接：直接使用图片的网络地址，但由于图片在别的服务器，不可控，故不建议使用
2-title:图片的标题。当鼠标指上时，显示的提示文字。
3-alt：当图片无法加载时显示的文字。
4-width/height:图片的尺寸，相当于CSS中的style=&amp;quot;width:&amp;quot;
5-align:图片周围的文字，相对于图片的排列方式。可选值：top/center/bottm&lt;/p&gt;
&lt;p&gt;4.表格标签&lt;/p&gt;
&lt;p&gt;【table】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;表格框
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;表格行
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;表格列
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;表格标题列（将tr中的td替换为th)，th默认加粗且在单元格居中显示。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【table的常用属性】
1-border：表格边框属性；当使用border=&amp;quot;1&amp;quot;设置边框时，会在所有td以及table上嵌套边框，当border加大时，只有table框会加粗。
2-cellspacing：单元格与单元格之间的间隙。当cellspacing=&amp;quot;0&amp;quot;时，单元格之间的间隙为0，但边框线并不会合并。
☆☆合并边框的写法style=&amp;quot;border-collapse:collapse;&amp;quot; 使用边框合并时，无需设置cellspacing。
3-cellpadding:单元格内边距，单元格中文字与单元格边框之间的距离。
4-width/height:表格的宽高
5-align：设置表格在父容器中的对齐方式 ，left/居左 center/居中 right/居右
☆☆当表格使用align属性时，相当于使表格浮动，可能会导致表格后面的元素受表格浮动影响，导致布局错乱。
6-bgcolor：背景色
7-background：背景图，后接相对路径。背景图和背景色同时生效时，图会覆盖背景色
8-bordercolor：设置边框颜色&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;标签的属性
当表格属性与行列属性冲突时，以行列属性为优先，属性设置优先级td&amp;gt;tr&amp;gt;table。
1-width,height:给单个的行列设置宽高
2-bgcolor:背景色
3-align：设置单元格中的文字，在单元格中的水平对齐方式 left/center/right
4-valign:设置单元格中文字在格中的垂直对齐方式 top/center/bottom
5-nowrap:nowrap=&amp;quot;nowrap&amp;quot;设置单元格文字行末不断行&lt;/p&gt;
&lt;p&gt;【表格的跨行与跨列】
1-跨列：colspan，某单元格跨N列，则该单元格右边的N-1个td就不需要了。
2-跨行：rowspan，某单元格跨N行，则该单元格下边的N-1个td就不需要了。&lt;/p&gt;
&lt;p&gt;5.表单标签
【form两个重要属性】
action：表单需要提交的服务器地址
method：表单提交数据使用的方法，get/post
get和post的区别
① get传参使用URL传递，所有参数在地址栏可见，不安全；get传参数据量有限。
② post传参使用http请求传递，比较安全；post可以传递大量数据。
但是，get请求的传输速率比post快。&lt;/p&gt;
&lt;p&gt;URL传参的形式：链接URL地址?name1=value1&amp;amp;name2=value2&lt;/p&gt;
&lt;p&gt;【input的常用属性】
① type：设置input的输入类型
② name：给input输入框命名。一般情况下，name属性必不可少。因为，传递数据时，使用name=value（输入内容）的形式传递。
③ value：input输入框的默认值
④ placeholder：输入框的提示内容。当input有默认的value或输入值时，placeholder消失&lt;/p&gt;
&lt;p&gt;【input-type属性的常用属性值】
① text：文本输入框
② password：密码输入框，输入内容默认显示小黑点
③ radio：单选框 checkbox：复选框
使用radio/checkbox时，value属性必填。提交时，提交的为value中的默认值；
radio/checkbox凭借name属性，确定是否属于同一组，name相同为同组，只能选一个
使用checked=&amp;quot;checked&amp;quot;属性，设置默认选中项
④ file：文件上传
使用accept=&amp;quot;类型&amp;quot;，设置只能上传的文件类型，如 accept=image/* 表示任意格式图片
⑤ submit：提交按钮，将所有表单数据提交至后台服务器
⑥ reset： 重置表单数据
⑦ image：图形提交按钮，跟submit一样，具有表单提交功能
使用src属性确定图片路径
⑧ button：普通按钮，没有屌用&lt;/p&gt;
&lt;p&gt;【属性名=属性值的情况】
① checked=&amp;quot;checked&amp;quot; 设置radio
② multiple=&amp;quot;multiple&amp;quot; 设置select控件为多选，可在界面使用Ctrl+鼠标，进行多选。一般不用。
③ selected=&amp;quot;selected&amp;quot; 设置select控件，默认选中的option选项
④ readonly=&amp;quot;readonly&amp;quot;
⑤ disabled=&amp;quot;disabled&amp;quot;
当input被disabled时，该input的name和value数据将无法向后台传送
⑥ hidden=&amp;quot;hidden&amp;quot; 隐藏控件。等效于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hiden&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;⑦ nowrap=nowrap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;【下拉选择控件 select】
① 写法：&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;option可以有N多个
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
② name属性，应该写在&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;上，所有选项只有一个name
③ multiple=&amp;#34;multiple&amp;#34; 设置select控件为多选，可在界面使用Ctrl+鼠标，进行多选。一般 不用。
④ option常用属性：
value=&amp;#34;&amp;#34;:当option没有value属性时，往后台传递的是&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;标签中的文字；
当option有value属性时，往后台传递的是value属性的值。
title=&amp;#34;&amp;#34;:鼠标指上后显示的文字。
selected=&amp;#34;selected&amp;#34;:默认选中。
⑤ &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;optgroup&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;山东省&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;optgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :用于将option标签进行分组，label属性表示分组名。

【文本域 textarea】
① 写法：&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
② 设置宽高style=&amp;#34;width: 200px; height: 150px;&amp;#34; 自身有cols=&amp;#34;&amp;#34; rows=&amp;#34;&amp;#34;两个属性，但不常用
③ readonly=&amp;#34;readonly&amp;#34; 设置为只读模式，不允许编辑。
④ style=&amp;#34;resize: none;&amp;#34; 设置为宽高不允许修改。
⑤ style=&amp;#34;overflow: ;&amp;#34; 设置当文字超出区域时，如何处理。
也可以通过overflow-x/overflow-y分别设置水平垂直方向的显示方式。
常用属性值:hidden 超出区域的文字，隐藏无法显示
scroll 无论文字多少，均会显示滚动
auto 自动，根据文字多少自动决定是否显示滚动条（默认样式）
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;【表格的边框与标题】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fieldset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 表格的边框
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;legend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;边框标题&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;legend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
...若干个表单元素
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fieldset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>HTML简介</title>
                <link>https://example.com/posts/html%E7%AE%80%E4%BB%8B/</link>
                <guid isPermaLink="true">https://example.com/posts/html%E7%AE%80%E4%BB%8B/</guid>
                <pubDate>Sat, 16 Mar 2019 20:13:36 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;什么是w3c&#34;&gt;什么是W3C&lt;/h1&gt;
&lt;p&gt;万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。为半自治非政府组织（quasi-autonomous non-governmental organisation）。&lt;/p&gt;
&lt;h2 id=&#34;历史&#34;&gt;历史&lt;/h2&gt;
&lt;p&gt;万维网联盟（W3C）由蒂姆·伯纳斯-李于1994年10月离开欧洲核子研究中心（CERN）后成立，在欧盟执委会和国防高等研究计划署（DARPA）的支持下成立于麻省理工学院MIT计算机科学与人工智能实验室（MIT／LCS），DARPA曾率先推出了互联网及其前身ARPANET。&lt;/p&gt;
&lt;p&gt;该组织试图透过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。&lt;/p&gt;
&lt;p&gt;CERN最初打算做为W3C的欧洲分支机构，然而CERN希望把重点放在粒子物理而不是信息技术上。1995年4月，法国国家信息与自动化研究所（INRIA）成为W3C的欧洲机构。1996年9月，庆应义塾大学SFC研究所成为W3C亚洲机构。从1997年开始，W3C在世界各地创建了区域办事处。截至2009年9月，已有十八个区域办事处，涵盖澳大利亚、比荷卢联盟、巴西、中国、芬兰、德国、奥地利、希腊、香港、匈牙利、印度、以色列、意大利、韩国、摩洛哥、南非、西班牙、瑞典。2013年1月，北京航空航天大学成为W3C中国机构。2016年，W3C在英国和爱尔兰创建了区域办事处。&lt;/p&gt;
&lt;h2 id=&#34;标准&#34;&gt;标准&lt;/h2&gt;
&lt;p&gt;为解决网络应用中不同平台、技术和开发者带来的不兼容问题，保障网络信息的顺利和完整流通，万维网联盟制定了一系列标准并督促网络应用开发者和内容提供者遵循这些标准。标准的内容包括使用语言的规范，开发中使用的导则和解释引擎的行为等等。W3C也制定了包括XML和CSS等的众多影响深远的标准规范。&lt;/p&gt;
&lt;p&gt;但是，W3C制定的网络标准似乎并非强制，而只是推荐标准。因此部分网站仍然不能完全实现这些标准，特别是使用早期所见即所得网页编辑软件设计的网页往往会包含大量非标准代码。&lt;/p&gt;
&lt;h1 id=&#34;什么是mdn&#34;&gt;什么是MDN&lt;/h1&gt;
&lt;p&gt;MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网络技术开发文档的免费网站。&lt;/p&gt;
&lt;h2 id=&#34;mdn历史&#34;&gt;MDN历史&lt;/h2&gt;
&lt;p&gt;该项目始于2005年，最初由Mozilla公司员工Deb Richardson领导。自2006年以来，文档工作由Eric Shepherd领导。&lt;/p&gt;
&lt;p&gt;网站最初的内容是由DevEdge提供，但在AOL收购Netscape后，DevEdge网站也宣布关闭。为此Mozilla基金会向AOL获取了DevEdge发布的内容，同时将DevEdge内容搬移到mozilla.org。&lt;/p&gt;
&lt;p&gt;MDN本身有一个论坛，并在Mozilla IRC网络上有一个IRC频道#mdn。MDN由Mozilla公司提供服务器和员工的资助。&lt;/p&gt;
&lt;p&gt;2016年10月3日发表的Brave网页浏览器将MDN作为其搜索引擎选项之一。&lt;/p&gt;
&lt;h1 id=&#34;html标签列表&#34;&gt;HTML标签列表&lt;/h1&gt;
&lt;h2 id=&#34;根元素节&#34;&gt;根元素节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;文档元数据节&#34;&gt;文档元数据节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义页面上相对 URL 的基准 URL。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	用于链接外部的 CSS 到该文档。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义其他 HTML 元素无法描述的元数据。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;	用于内联 CSS。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;脚本节&#34;&gt;脚本节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noscript&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;  定义当浏览器不支持脚本时显示的替代文字。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;  这个元素在 HTML5 中加入通过 JavaScript 在运行时实例化内容的容器。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;章节节&#34;&gt;章节节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表 HTML文档的内容。在文档中只能有一个 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入定义文档中的一个章节。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入定义只包含导航链接的章节。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入定义可以独立于内容其余部分的完整独立内容块。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	定义和页面内容关联度较低的内容——如果被删除，剩下的内容仍然很合理。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	标题元素实现了六层文档标题，&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 是最大的标题，&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 是最小的标题。标题元素简要地描述章节的主题。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	定义页面或章节的头部。它经常包含 logo、页面标题和导航性的目录。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;footer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义包含联系信息的一个章节。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;这个元素在 HTML5 中加入	定义文档中主要或重要的内容。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;组织内容节&#34;&gt;组织内容节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义一个段落。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表章节、文章或其他长内容中段落之间的分隔符。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表其内容已经预先排版过，格式应当保留 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;blockquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表引用自其他来源的内容。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义一个有序列表。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义一个无序列表。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义列表中的一个列表项。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义一个定义列表（一系列术语和其定义）。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个由下一个 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 定义的术语。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表出现在它之前术语的定义。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一个和文档有关的图例。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一个图例的说明。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个通用的容器，没有特殊含义。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;文字形式节&#34;&gt;文字形式节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个链接到其他资源的超链接 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表强调 文字。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表特别重要 文字。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;small&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表注释 ，如免责声明、版权声明等，对理解文档不重要。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表不准确或不相关 的内容。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表作品标题 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表内联的引用 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dfn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个术语包含在其最近祖先内容中的定义 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;abbr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表省略 或缩写 ，其完整内容在 title 属性中。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表计算机代码 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表代码中的变量 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;samp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表程序或电脑的输出 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kbd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	分别代表下标 和上标 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一段不同性质 的文字，如技术术语、外文短语等。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一段需要被关注 的文字。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一段需要被高亮的引用 文字。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ruby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表被ruby 注释 标记的文本，如中文汉字和它的拼音。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表ruby 注释 ，如中文拼音。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bdo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	指定子元素的文本方向 ，显式地覆盖默认的文本方向。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表换行 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;wbr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;编辑节&#34;&gt;编辑节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义增加 到文档的内容。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义从文档移除 的内容。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;嵌入内容节&#34;&gt;嵌入内容节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一张图片 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个内联的框架 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;embed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一个嵌入 的外部资源，如应用程序或交互内容。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个外部资源 ，如图片、HTML 子文档、插件等。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素所指定的插件的参数 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一段声音 ，或音频流 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	为 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 或 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这类媒体元素指定媒体源 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	为 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 或 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这类媒体元素指定文本轨道（字幕） 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	与 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素共同定义图像映射 区域。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	与 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素共同定义图像映射 区域。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;svg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	定义一个嵌入式矢量图 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	定义一段数学公式 。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;表格节&#34;&gt;表格节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	定义多维数据 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;caption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格的标题 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;colgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中一组单列或多列 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中的列 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中一块具体数据 （表格主体）。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;thead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中一块列标签 （表头）。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tfoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中一块列摘要 （表尾）。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中的行 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中的单元格 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表格中的头部单元格 。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;表单节&#34;&gt;表单节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个表单 ，由控件组成。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fieldset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表控件组 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;legend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fieldset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 控件组的标题 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表表单控件的标题 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表允许用户编辑数据的数据区 （文本框、单选框、复选框等）。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表按钮 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表下拉框 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;datalist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表提供给其他控件的一组预定义选项 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;optgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个选项分组 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表一个 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素或 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;datalist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素中的一个选项
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;	代表多行文本框 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keygen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一个密钥对生成器 控件。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表计算值 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;progress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表进度条 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表滑动条 。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;交互元素节&#34;&gt;交互元素节&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一个用户可以(点击)获取额外信息或控件的小部件 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 元素的综述 或标题 。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;menuitem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表一个用户可以点击的菜单项。
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 这个元素在 HTML5 中加入	代表菜单。
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;什么是空标签&#34;&gt;什么是空标签&lt;/h1&gt;
&lt;p&gt;没有闭合标签的标签被称作为空标签。
在我们使用的标签中，有的具有闭合标签。例如&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;标签，它有闭合标签&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;。但是也有一部分标签没有闭合标签，例如&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;标签，这一类标签我们称之为空标签。&lt;/p&gt;
&lt;h2 id=&#34;常见的空标签有哪些&#34;&gt;常见的空标签有哪些&lt;/h2&gt;
&lt;pre class=&#34;hljs xml&#34;&gt;
&lt;code class=&#34;xml&#34;&gt;
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; /&amp;gt;&lt;/span&gt;  用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;img&lt;/span&gt; /&amp;gt;&lt;/span&gt; 代表文档中的一个图像。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;isindex&lt;/span&gt; /&amp;gt;&lt;/span&gt; 使浏览器显示一个对话框，提示用户输入单行文本。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;area&lt;/span&gt; /&amp;gt;&lt;/span&gt; 在图片上定义一个热点区域
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;base&lt;/span&gt; /&amp;gt;&lt;/span&gt; 指定用于一个文档中包含的所有相对URL的基本URL。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;basefont&lt;/span&gt; /&amp;gt;&lt;/span&gt; 用来设置文档的默认字体大小。（目前已废弃 ）
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bgsound&lt;/span&gt; /&amp;gt;&lt;/span&gt; IE浏览器中设置网页背景音乐的元素。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;col&lt;/span&gt; /&amp;gt;&lt;/span&gt; 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于`&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;colgroup&lt;/span&gt;&amp;gt;&lt;/span&gt;`元素内。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;embed&lt;/span&gt; /&amp;gt;&lt;/span&gt; 用于表示一个外部应用或交互式内容的集合点，换句话说，就是一个插件。 
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;frame&lt;/span&gt; /&amp;gt;&lt;/span&gt; ，它定义了一个特定区域，另一个 HTML 文档可以在里面展示。(已废弃)
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;keygen&lt;/span&gt; /&amp;gt;&lt;/span&gt;  为了方便生成密钥材料和提交作为 [HTML form]的一部分的公钥.这种机制被用于设计基于 Web 的证书管理系统。(已废弃)
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt; /&amp;gt;&lt;/span&gt; 指定了外部资源与当前文档的关系. 这个元素的使用方法包括为导航定义关系框架.这个元素经常用来链接css文件。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;meta&lt;/span&gt; /&amp;gt;&lt;/span&gt; 元素表示那些不能由其它HTML元相关元素 (&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;base&lt;/span&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;handlebars&#34;&gt;&lt;span class=&#34;xml&#34;&gt;, 
         &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;xml&#34;&gt; 或 &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;) 之一表示的任何元数据信息.
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;nextid&lt;/span&gt; /&amp;gt;&lt;/span&gt;  是一个过时的 HTML 元素, 它使下一个 web 设计工具能够为其定位点生成自动名称标签。
            它是由该 web 编辑工具自动生成的, 不需要手动调整或输入。这个元素的区别是成为第一个元素, 成为一个 &#34;丢失的标签&#34; 被淘汰的官方公共 DTD 的 HTML 版本。
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;param&lt;/span&gt; /&amp;gt;&lt;/span&gt;  定义了 &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;object&lt;/span&gt;&amp;gt;&lt;/span&gt;的参数
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;plaintext&lt;/span&gt; /&amp;gt;&lt;/span&gt; 将起始标签后面的任何东西渲染为纯文本，不会解释为 HTML。它没有闭合标签，因为任何后面的东西都会看做纯文本。(已废弃)
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;spacer&lt;/span&gt; /&amp;gt;&lt;/span&gt; 它可以向页面插入间隔。它由 Netscape 设计，用于实现单像素布局图像的相同效果，Web 设计师用它来向页面添加空白，而不需要实际使用图片。（已废弃）
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;wbr&lt;/span&gt; /&amp;gt;&lt;/span&gt; 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;什么是可替换标签&#34;&gt;什么是可替换标签&lt;/h1&gt;
&lt;p&gt;在 CSS 中，可替换元素（replaced element）的展现效果不是由 CSS 来控制的。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。&lt;/p&gt;
&lt;p&gt;简单来说，它们的内容不受当前文档的样式的影响。CSS 可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。某些可替换元素，例如&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;元素，可能具有自己的样式表，但它们不会继承父文档的样式。&lt;/p&gt;
&lt;p&gt;CSS 能对可替换元素产生的唯一影响在于，部分属性支持控制元素内容在其框中的位置或定位方式。有关详细信息，请参阅本文下面的控制内容框中的对象位置。&lt;/p&gt;
&lt;h2 id=&#34;可替换标签&#34;&gt;可替换标签&lt;/h2&gt;
&lt;p&gt;典型的可替换元素有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;embed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;有些元素仅在特定情况下被作为可替换元素处理，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;applet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;HTML 规范也说了 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素可替换，因为 &amp;quot;image&amp;quot; 类型的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;元素就像&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;一样被替换。但是其他形式的控制元素，包括其他类型的 &lt;code&gt;&amp;lt;input&amp;gt; &lt;/code&gt;元素，被明确地列为非可替换元素（non-replaced elements）。该规范用术语小挂件（Widgets）来描述它们默认的限定平台的渲染行为。&lt;/p&gt;
&lt;p&gt;用 CSS content 属性插入的对象是匿名的可替换元素。它们并不存在于 HTML 标记中，因此是“匿名的”。&lt;/p&gt;
&lt;h2 id=&#34;css与可替换标签&#34;&gt;CSS与可替换标签&lt;/h2&gt;
&lt;p&gt;CSS 在某些情况下会对可替换元素做一些特殊处理，比如计算外边距（margin）和一些 auto 的具体值。&lt;/p&gt;
&lt;p&gt;需要注意的是，一部分（并非全部）可替换元素，其本身具有的尺寸和基线（baseline）会被一些 CSS 属性用到，加入计算之中，例如 vertical-align。会只有可替换元素才能具有这种自带值。&lt;/p&gt;
&lt;p&gt;控制内容框中的对象位置节
某些CSS属性可用于指定被替换元素中包含的对象应如何定位在元素的框区域中。这些由CSS图像模块第3级和CSS图像模块第4级规范定义:&lt;/p&gt;
&lt;p&gt;object-fit
指定应如何将替换后的元素的内容对象安装到包含元素的框中。&lt;/p&gt;
&lt;p&gt;对象的位置
指定被替换元素的内容对象在元素框中的对齐方式。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>关于HTTP的请求与相应</title>
                <link>https://example.com/posts/%E5%85%B3%E4%BA%8Ehttp%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E7%9B%B8%E5%BA%94/</link>
                <guid isPermaLink="true">https://example.com/posts/%E5%85%B3%E4%BA%8Ehttp%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E7%9B%B8%E5%BA%94/</guid>
                <pubDate>Fri, 15 Mar 2019 16:42:06 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;http请求的格式&#34;&gt;HTTP请求的格式&lt;/h1&gt;
&lt;p&gt;1 动词 路径 协议/版本
2 Key1: value1
2 Content-Type: application/x-www-form-urlencoded
2 Host: &lt;a href=&#34;http://www.baidu.com&#34;&gt;www.baidu.com&lt;/a&gt;
2 User-Agent: curl/7.54.0
3
4 要上传的数据
请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）
第三部分永远都是一个回车（\n）&lt;/p&gt;
&lt;p&gt;当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：（1）请求方法URI协议/版本（2）　请求头(Request Header)（3）　请求正文
（1）请求方法URI协议/版本
请求的第一行是“方法URI协议/版本”例如：GET/sample.jsp HTTP/1.1
以上代码中“GET”代表请求方法，“/sample.jsp”表示URI，“HTTP/1.1代表协议和协议的版本。
（2）请求头(Request Header)
请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。例如：
Accept:image/gif.image/jpeg.&lt;em&gt;/&lt;/em&gt;
Accept-Language:zh-cn
Connection:Keep-Alive
Host:localhost
User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)
Accept-Encoding:gzip,deflate.
（3）请求正文
请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：
username=jinqiao&amp;amp;password=1234&lt;/p&gt;
&lt;h2 id=&#34;用chrome查看请求&#34;&gt;用Chrome查看请求&lt;/h2&gt;
&lt;p&gt;1.打开检查，进入Network
2.在地址栏输入网址
3.在 Network 点击，查看 request，点击「view source」
4.如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到&lt;/p&gt;
&lt;h1 id=&#34;http响应&#34;&gt;HTTP响应&lt;/h1&gt;
&lt;p&gt;请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。&lt;/p&gt;
&lt;p&gt;1.GET 请求和 POST 请求对应的响应可以一样，也可以不一样
2.响应的第四部分可以很长很长很长&lt;/p&gt;
&lt;h2 id=&#34;响应的格式&#34;&gt;响应的格式&lt;/h2&gt;
&lt;p&gt;1 协议/版本号 状态码 状态解释
2 Key1: value1
2 Key2: value2
2 Content-Length: 17931
2 Content-Type: text/html
3
4 要下载的内容&lt;/p&gt;
&lt;h2 id=&#34;用chrome查看响应&#34;&gt;用Chrome查看响应&lt;/h2&gt;
&lt;p&gt;1.打开 Network
2.输入网址
3.选中第一个响应
4.查看 Response Headers，点击「view source」，点击「view source」，点击「view source」
5.你会看到响应的前两部分
6.查看 Response 或者 Preview，你会看到响应的第 4 部分&lt;/p&gt;
&lt;h1 id=&#34;使用-curl-命令&#34;&gt;使用 curl 命令&lt;/h1&gt;
&lt;p&gt;进入命令行界面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -s -v -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Frank: xxx&amp;#34;&lt;/span&gt; -- &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.baidu.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上是用Git Bash查看请求与响应的命令
会得到相关内容&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>命令行相关</title>
                <link>https://example.com/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9B%B8%E5%85%B3/</link>
                <guid isPermaLink="true">https://example.com/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9B%B8%E5%85%B3/</guid>
                <pubDate>Thu, 14 Mar 2019 12:46:03 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;ls&#34;&gt;ls&lt;/h2&gt;
&lt;p&gt;查看路径&lt;/p&gt;
&lt;h2 id=&#34;cat&#34;&gt;cat&lt;/h2&gt;
&lt;p&gt;1.一次显示整个文件。
$ cat   filename
2.从键盘创建一个文件。
$ cat  &amp;gt;  filename
只能创建新文件,不能编辑已有文件.
3.将几个文件合并为一个文件。
$cat   file1   file2  &amp;gt; file&lt;/p&gt;
&lt;h2 id=&#34;mv&#34;&gt;mv&lt;/h2&gt;
&lt;p&gt;mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename) files），是Linux系统下常用的命令，经常用来备份文件或者目录&lt;/p&gt;
&lt;h2 id=&#34;touch&#34;&gt;touch&lt;/h2&gt;
&lt;p&gt;1.是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；
2.是用来创建新的空文件&lt;/p&gt;
&lt;h2 id=&#34;explainshellcom-这个网站是用来查找自己不懂得命令行的相关释义&#34;&gt;explainshell.com 这个网站是用来查找自己不懂得命令行的相关释义&lt;/h2&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
